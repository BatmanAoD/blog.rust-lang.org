<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/inside-rust/" version="0.1.0">Inside Rust Blog</generator>
    <link href="https://blog.rust-lang.org/inside-rust/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/inside-rust/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/inside-rust/</id>
    <title>Inside Rust Blog</title>
    <subtitle>Want to follow along with Rust development? Curious how you might get involved? Take a look!</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2020-01-25T23:55:41Z</updated>

    
    <entry>
        <title>Upcoming compiler-team design meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/1/24/upcoming-compiler-team-design-meetings.html" type="text/html" title="Upcoming compiler-team design meetings" />
        <published>2020-01-24T00:00:00Z</published>
        <updated>2020-01-24T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/1/24/upcoming-compiler-team-design-meetings.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/1/24/upcoming-compiler-team-design-meetings.html">&lt;p&gt;In our &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/planning.20meeting.202019.2E01.2E17&quot;&gt;planning meeting on January 17&lt;/a&gt;, the &lt;a href=&quot;https://www.rust-lang.org/governance/teams/compiler&quot;&gt;compiler team&lt;/a&gt; has scheduled our
next batch of upcoming design meetings. You can find the exact times
on the compiler team's &lt;a href=&quot;https://rust-lang.github.io/compiler-team/#meeting-calendar&quot;&gt;meeting calendar&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On Feb 7th (&lt;a href=&quot;https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=Mmk4NmZqaWVtcHVmZDRmanZob3ZrMXJ1N28gNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com&quot;&gt;calendar event&lt;/a&gt;), we will discuss
&lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/237&quot;&gt;rust-lang/compiler-team#237&lt;/a&gt;, which describes some potential ways
to extract a Rust parser that can be shared between rustc and
rust-analyzer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#did-you-know&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;did-you-know&quot;&gt;&lt;/a&gt;Did you know?&lt;/h3&gt;
&lt;p&gt;Most weeks, the compiler team has some sort of design meeting. These
meetings take place on Zulip and are open to all. Every 4 weeks, we do
a planning meeting to pick the next few meetings from the list of open
proposals. You can find &lt;a href=&quot;https://rust-lang.github.io/compiler-team/about/steering-meeting/&quot;&gt;more details about how the compiler-team
steering meeting process here&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>February Lang Team Design Meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/1/24/feb-lang-team-design-meetings.html" type="text/html" title="February Lang Team Design Meetings" />
        <published>2020-01-24T00:00:00Z</published>
        <updated>2020-01-24T00:00:01Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/1/24/feb-lang-team-design-meetings.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/1/24/feb-lang-team-design-meetings.html">&lt;p&gt;We've scheduled our &lt;strong&gt;language team design meetings&lt;/strong&gt; for February. The current plans are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;February 3rd -- we will do an overview of &lt;strong&gt;specialization&lt;/strong&gt;. We'll cover details from the RFC but in particular talk about the &lt;a href=&quot;http://aturon.github.io/tech/2018/04/05/sound-specialization/&quot;&gt;as-yet-unimplemented plans to make it sound&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;February 10th -- we will cover interactions between the &lt;code&gt;&amp;amp;T&lt;/code&gt; type and LLVM's dereferenceable attribute, such as &lt;a href=&quot;https://github.com/rust-lang/rust/issues/55005&quot;&gt;rust-lang/rust#55005&lt;/a&gt; and &lt;a href=&quot;https://github.com/japaric/volatile-register/issues/10&quot;&gt;problems modeling MMIO&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;February 17th -- no meeting, it is President's Day in the US and many of us are absent&lt;/li&gt;
&lt;li&gt;February 24th -- we will summarize discussions from &lt;a href=&quot;https://github.com/rust-lang/project-ffi-unwind&quot;&gt;the ffi-unwind project group&lt;/a&gt; about whether we should permit foreign exceptions to propagate across the &amp;quot;C&amp;quot; ABI boundary, or establish a separate ABI (e.g., &amp;quot;C unwind&amp;quot;) for such cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#about-the-language-team-design-meetings&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;about-the-language-team-design-meetings&quot;&gt;&lt;/a&gt;About the language team design meetings&lt;/h2&gt;
&lt;p&gt;The idea of the design meeting is that it's a time for us to have
in-depth discussions on some particular topic. This might be a burning
problem that we've discovered, an update on some existing design work,
or a forward looking proposal.&lt;/p&gt;
&lt;p&gt;The meetings are open for anyone to listen in and attend. They are
typically also recorded and posted online, along with minutes, after
the fact. They generally take place on Mondays at &amp;quot;noon Boston time&amp;quot;
-- but for the precise scheduling you should check the &lt;a href=&quot;https://github.com/rust-lang/lang-team/#meeting-calendar&quot;&gt;lang team
calendar&lt;/a&gt;. Scheduled meetings are subject to change and
cancelation. In that case, the calendar events will be updated.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>cargo-audit v0.11: Introducing the `fix` feature, yanked crate detection, and more</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/1/23/Introducing-cargo-audit-fix-and-more.html" type="text/html" title="cargo-audit v0.11: Introducing the `fix` feature, yanked crate detection, and more" />
        <published>2020-01-23T00:00:00Z</published>
        <updated>2020-01-23T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/1/23/Introducing-cargo-audit-fix-and-more.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/1/23/Introducing-cargo-audit-fix-and-more.html">&lt;p&gt;&lt;a href=&quot;https://github.com/rustsec/cargo-audit&quot;&gt;cargo-audit&lt;/a&gt; is a command-line utility which inspects &lt;code&gt;Cargo.lock&lt;/code&gt; files and compares them against the &lt;a href=&quot;https://rustsec.org&quot;&gt;RustSec Advisory Database&lt;/a&gt;, a community database of security vulnerabilities maintained by the &lt;a href=&quot;https://github.com/rust-secure-code/wg&quot;&gt;Rust Secure Code Working Group&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post describes the new features in the 0.11 release of &lt;code&gt;cargo-audit&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#cargo-audit-fix-automatically-update-vulnerable-dependencies&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;cargo-audit-fix-automatically-update-vulnerable-dependencies&quot;&gt;&lt;/a&gt;&lt;code&gt;cargo audit fix&lt;/code&gt;: automatically update vulnerable dependencies&lt;/h2&gt;
&lt;p&gt;One of our &lt;a href=&quot;https://github.com/RustSec/cargo-audit/issues/23&quot;&gt;most requested features&lt;/a&gt; (especially by fans of the similar &lt;a href=&quot;https://docs.npmjs.com/cli/audit&quot;&gt;&lt;code&gt;npm audit fix&lt;/code&gt;&lt;/a&gt; command), the &lt;a href=&quot;https://github.com/RustSec/cargo-audit#cargo-audit-fix-subcommand&quot;&gt;new &lt;code&gt;cargo audit fix&lt;/code&gt; subcommand&lt;/a&gt; will attempt to automatically update version requirements for vulnerable dependencies to non-vulnerable versions.&lt;/p&gt;
&lt;p&gt;Note that this is an experimental new feature which isn't enabled by default. To try it out, install &lt;code&gt;cargo-audit&lt;/code&gt; with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cargo install cargo-audit --features=fix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will perform the same audit process as &lt;code&gt;cargo audit&lt;/code&gt; initially, and then attempt to apply fixes to your &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/RustSec/cargo-audit/c857beb/img/screenshot-fix.png&quot; alt=&quot;cargo audit fix screenshot&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Under the hood, it uses &lt;a href=&quot;https://github.com/killercup/cargo-edit&quot;&gt;cargo-edit&lt;/a&gt; (as a library) to perform modifications to your &lt;code&gt;Cargo.toml&lt;/code&gt; file, using the fixed version requirements listed in the advisory to try to perform an automatic upgrade to a non-vulnerable version of a dependency for each advisory.&lt;/p&gt;
&lt;p&gt;Note once more that this is a &lt;em&gt;new, experimental feature&lt;/em&gt; and as such it's bound to have bugs. If you're worried, you can use &lt;code&gt;cargo audit fix --dry-run&lt;/code&gt; to perform a dry run only. And if you do encounter bugs, please &lt;a href=&quot;https://github.com/rustsec/cargo-audit/issues&quot;&gt;file a bug report&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We'd like to thank Reza Fatahi and Hanif Ariffin for their work in contributing this feature.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#warnings-for-yanked-crates&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;warnings-for-yanked-crates&quot;&gt;&lt;/a&gt;Warnings for yanked crates&lt;/h2&gt;
&lt;p&gt;As you can see in the screenshot above, &lt;code&gt;cargo audit&lt;/code&gt; now checks each of the crates in your &lt;code&gt;Cargo.lock&lt;/code&gt; file against the &lt;a href=&quot;https://crates.io&quot;&gt;crates.io&lt;/a&gt; index to determine if any of them have been yanked. If they have, it will emit a warning as per above.&lt;/p&gt;
&lt;p&gt;If you'd like for yanked crates to be a hard failure, you can run &lt;code&gt;cargo audit&lt;/code&gt; with the &lt;code&gt;-D&lt;/code&gt; command-line argument:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cargo audit -D
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or if you prefer to be more explicit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cargo audit --deny-warnings
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a href=&quot;#compatibility-with-the-new-v2&quot;-format-for-cargo.lock&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;compatibility-with-the-new-v2&quot;-format-for-cargo.lock&quot;&gt;&lt;/a&gt;Compatibility with the new &amp;quot;V2&amp;quot; format for &lt;code&gt;Cargo.lock&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Rust 1.39 shipped support for a new &lt;a href=&quot;https://github.com/rust-lang/cargo/pull/7070&quot;&gt;merge-friendly &lt;code&gt;Cargo.lock&lt;/code&gt; format&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cargo audit&lt;/code&gt; consumes &lt;code&gt;Cargo.lock&lt;/code&gt; directly, and while the V2 format change didn't break the core vulnerability-auditing functionality of &lt;code&gt;cargo audit&lt;/code&gt;, several minor features regressed because of this, such as displaying dependency trees for vulnerable dependencies.&lt;/p&gt;
&lt;p&gt;This release also upgrades to version 4.0 of the &lt;a href=&quot;https://github.com/RustSec/cargo-lock&quot;&gt;&lt;code&gt;cargo-lock&lt;/code&gt; crate&lt;/a&gt;, which includes full support for the V2 &lt;code&gt;Cargo.lock&lt;/code&gt; format and constructs a representation of a lockfile which is the same across the V1 and V2 formats.&lt;/p&gt;
&lt;p&gt;If you noticed dependency trees failing to display after upgrading to the V2 &lt;code&gt;Cargo.lock&lt;/code&gt; format, they should now be working again!&lt;/p&gt;
&lt;p&gt;Thanks for reading, and we hope you enjoy &lt;code&gt;cargo-audit&lt;/code&gt; 0.11!&lt;/p&gt;
</content>

        <author>
            <name>Tony Arcieri</name>
        </author>
    </entry>
    
    <entry>
        <title>Governance Working Group Update: Meeting 14 January 2020</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/1/14/Goverance-wg-cfp.html" type="text/html" title="Governance Working Group Update: Meeting 14 January 2020" />
        <published>2020-01-14T00:00:00Z</published>
        <updated>2020-01-14T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/1/14/Goverance-wg-cfp.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/1/14/Goverance-wg-cfp.html">&lt;p&gt;Hello everyone!&lt;/p&gt;
&lt;p&gt;On Tuesday 14 January the working group met and discussed the RFC
https://github.com/rust-lang/wg-governance/blob/project-wg-rfc-next/draft-rfcs/working-group-terminology.md.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#project-groups&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;project-groups&quot;&gt;&lt;/a&gt;Project groups&lt;/h2&gt;
&lt;p&gt;You can see the &lt;a href=&quot;https://github.com/rust-lang/wg-governance/blob/master/minutes/2020.01.14.md&quot;&gt;detailed minutes&lt;/a&gt; on the &lt;a href=&quot;https://github.com/rust-lang/wg-governance/&quot;&gt;wg-governance&lt;/a&gt; repository, but here is a quick summary:&lt;/p&gt;
&lt;p&gt;*Decision for specifics of working group creation is to remain with what was described in https://internals.rust-lang.org/t/enabling-the-formation-of-new-working-groups/10218
*Group status will be Active or Archived
*Future work will be done to lighten the RFC process (an issue has been submitted)
*A project group lifecycle chart was created and a flowchart based on this will be integrated in the RFC&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#next-meeting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;next-meeting&quot;&gt;&lt;/a&gt;Next meeting&lt;/h2&gt;
&lt;p&gt;Our next meeting will be 28 January 2020. We will discuss the status of the project groups RFC for no more than 15 minutes,
and then focus on reviewing action items from the meeting of December 3rd.&lt;/p&gt;
</content>

        <author>
            <name>Val Grimm</name>
        </author>
    </entry>
    
    <entry>
        <title>Lang Team Design Meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/1/10/lang-team-design-meetings.html" type="text/html" title="Lang Team Design Meetings" />
        <published>2020-01-10T00:00:00Z</published>
        <updated>2020-01-10T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/1/10/lang-team-design-meetings.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/1/10/lang-team-design-meetings.html">&lt;p&gt;Hi all! I wanted to give a quick update about the lang team. We're
starting something new this year: a regular &lt;strong&gt;design meeting&lt;/strong&gt;.  The
idea of the design meeting is that it's a time for us to have in-depth
discussions on some particular topic. This might be a burning problem
that we've discovered, an update on some existing design work, or a
forward looking proposal.&lt;/p&gt;
&lt;p&gt;The meetings will be scheduled in advance. Ideally, each meeting
should also have a blog post before-hand giving background material,
although that may be difficult to achieve in practice. Similarly,
after each meeting, we'll typically post minutes and a recording, and
ideally try to write up a summary blog post with major
points. (Sometimes recordings are hard to achieve, either for
technical reasons or because we wanted the ability to discuss more
sensitive topics.)&lt;/p&gt;
&lt;p&gt;The meetings are open for anyone to listen in and attend. They
generally take place on Mondays at &amp;quot;noon Boston time&amp;quot; -- but for the
precise scheduling you should check the &lt;a href=&quot;https://github.com/rust-lang/lang-team/#meeting-calendar&quot;&gt;lang team calendar&lt;/a&gt;. We'll
try to keep the calendar up to date with the topic to be discussed in
each meeting, as well.  Meetings might not happen every week, if we
don't have a topic in mind.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#first-design-meeting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;first-design-meeting&quot;&gt;&lt;/a&gt;First design meeting&lt;/h2&gt;
&lt;p&gt;Our first design meeting was actually last Monday! We discussed the
soundness hole that was found some time ago in &lt;code&gt;Pin&lt;/code&gt;.  You can read
the &lt;a href=&quot;https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2020-01-06-Pin-unsoundness.md&quot;&gt;minutes&lt;/a&gt; from our discussion and a &lt;a href=&quot;https://youtu.be/MX_GRNLhlY8&quot;&gt;recording&lt;/a&gt; is also
available. You might also find it easier to read the &lt;a href=&quot;https://internals.rust-lang.org/t/unsoundness-in-pin/11311/112?u=nikomatsakis&quot;&gt;comments in the
internals thread&lt;/a&gt;. The good news is that we seem to be
centralizing on a &lt;a href=&quot;https://internals.rust-lang.org/t/explicit-negative-impls-to-fix-pin-soundness-hole/11587&quot;&gt;solution based on negative impls&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#next-design-meeting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;next-design-meeting&quot;&gt;&lt;/a&gt;Next design meeting&lt;/h2&gt;
&lt;p&gt;The next design meeting will take place this coming Monday. The topic
will be how to fix &lt;a href=&quot;https://github.com/rust-lang/rust/issues/57893&quot;&gt;rust-lang/rust#57893&lt;/a&gt;, which is a soundness bug
related to &lt;code&gt;dyn&lt;/code&gt; types. There is a &lt;a href=&quot;https://gist.github.com/0cf84ac05ce7751b5759cbf335c4d327&quot;&gt;prepared writeup describing the
problem and a possible solution&lt;/a&gt; to guide the meeting. It is
maybe worth noting that one of the proposed solutions involved a Rust
2021 edition as well (although there are smaller, more targeted fixes
that do not require a new edition).&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#design-meetings-after-that&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;design-meetings-after-that&quot;&gt;&lt;/a&gt;Design meetings after that&lt;/h2&gt;
&lt;p&gt;The next two weeks are likely to not have design meetings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;January 20th is Martin Luther King, Jr. day in the US.&lt;/li&gt;
&lt;li&gt;January 27th is the Mozilla All Hands.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a result, in both cases, many of the lang team members will be
unable to attend.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>Cargo in 2020</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/1/10/cargo-in-2020.html" type="text/html" title="Cargo in 2020" />
        <published>2020-01-10T00:00:00Z</published>
        <updated>2020-01-10T00:00:01Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/1/10/cargo-in-2020.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/1/10/cargo-in-2020.html">&lt;p&gt;This post is an overview of the major projects the Cargo team is interested in
tackling in 2020.&lt;/p&gt;
&lt;p&gt;It can be difficult to plan and predict around a volunteer-based open-source
project with limited resources. Instead of trying to present a wish list,
these are projects that already have a solid effort planned to push them
forward. That doesn't mean that we are not interested in other projects. We
have compiled a more detailed wish list at
&lt;a href=&quot;https://github.com/rust-lang/cargo/projects/1&quot;&gt;https://github.com/rust-lang/cargo/projects/1&lt;/a&gt; that gives an outline of
things we would like to see, but are unlikely to have significant progress
this year.&lt;/p&gt;
&lt;p&gt;If you are interested in helping, please let us know! We may not have time to
shepherd additional projects, but we may have time to give some amount of
feedback and review, particularly for well-motivated people who can do the
legwork of design and gathering a consensus.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#features&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;features&quot;&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section&quot;&gt;Features&lt;/a&gt; provide a way to express optional dependencies and conditional
compilation of code. Fixes and enhancements to Features are one of the
most requested things we hear. In the beginning of 2020, we plan to implement
a new feature resolver which will make it easier to make progress on
implementing and experimenting with new behavior. There is a wide variety of
different enhancements that we are looking at, which we hope to make
incremental progress on while retaining a full picture of the long-term
plan.&lt;/p&gt;
&lt;p&gt;Initially we plan to address the issues of decoupling shared dependencies
built with different features. Currently, features are unified for all uses of
a dependency, even when it is not necessary. This causes problems when a
feature intended for one context is incompatible with another. This often
happens for packages which have conditional &lt;code&gt;no_std&lt;/code&gt; support. This appears
with build-dependencies, dev-dependencies, target-specific dependencies, and
large workspaces, each of which have their unique challenges.&lt;/p&gt;
&lt;p&gt;Beyond that, the following is a brief view of the other major enhancements we
are tracking for the future:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Workspace feature selection and unification&lt;/li&gt;
&lt;li&gt;Automatic features&lt;/li&gt;
&lt;li&gt;Namespaced features&lt;/li&gt;
&lt;li&gt;Mutually exclusive features&lt;/li&gt;
&lt;li&gt;Private/unstable features&lt;/li&gt;
&lt;li&gt;Profile and target default features&lt;/li&gt;
&lt;li&gt;And working through some of the 50+ feature issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are some significant challenges around retaining backwards
compatibility, and being sensitive to increased build times. We hope that we
can address some of the major pain points while balancing those concerns.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#std-aware-cargo&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;std-aware-cargo&quot;&gt;&lt;/a&gt;std aware Cargo&lt;/h2&gt;
&lt;p&gt;The &amp;quot;std aware Cargo&amp;quot; project is to make Cargo aware of the Rust standard
library, and to build it from source instead of using the pre-built binaries
that ship with &lt;code&gt;rustc&lt;/code&gt;. Some of the notable benefits are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Customizing the compile-time flags of the standard library, such as using
different optimizations, target-cpu, debug settings, etc.&lt;/li&gt;
&lt;li&gt;Supporting cross-compiling to new targets which do not have official
distributions.&lt;/li&gt;
&lt;li&gt;Paving the road for future enhancements, such as compiling with different
features, and using custom sources.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A significant amount of work has already been finished in 2019 with the
&lt;a href=&quot;https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std&quot;&gt;&lt;code&gt;-Zbuild-std&lt;/code&gt;&lt;/a&gt; feature available on the nightly channel. There is still a
long road to bring it to a state where it can be stabilized. Work is being
tracked in the &lt;a href=&quot;https://github.com/rust-lang/wg-cargo-std-aware/&quot;&gt;&lt;code&gt;wg-cargo-std-aware&lt;/code&gt; repo&lt;/a&gt;, and anyone interested is
encouraged to leave feedback on the issue tracker.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#profiles&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;profiles&quot;&gt;&lt;/a&gt;Profiles&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://doc.rust-lang.org/nightly/cargo/reference/profiles.html&quot;&gt;Profiles&lt;/a&gt; have received a significant amount of work in 2018 and 2019.
&lt;a href=&quot;https://doc.rust-lang.org/nightly/cargo/reference/profiles.html#overrides&quot;&gt;Overrides&lt;/a&gt; are now stable (shipping in Rust 1.41). &lt;a href=&quot;https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#custom-named-profiles&quot;&gt;Custom named profiles&lt;/a&gt;
are available on the nightly channel. In 2020 we hope to continue pushing
these enhancements forward. Some of the efforts we are working towards are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stabilizing &lt;a href=&quot;https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#config-profiles&quot;&gt;config-based profiles&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Stabilizing &lt;a href=&quot;https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#custom-named-profiles&quot;&gt;custom-named profiles&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Implementing the &lt;code&gt;build&lt;/code&gt; profile which can make it easier to define build-script settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#ongoing-projects&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;ongoing-projects&quot;&gt;&lt;/a&gt;Ongoing projects&lt;/h2&gt;
&lt;p&gt;Some ongoing efforts don't have an end, and we intend to continue making
progress with them. Several new chapters have been added to the documentation,
and there is more to come. The JSON APIs are continually expanding with new
information making it easier to integrate tools and extract information. And
of course, trying to stay on top of bugs and issues!&lt;/p&gt;
</content>

        <author>
            <name>Eric Huss</name>
        </author>
    </entry>
    
    <entry>
        <title>Welcome to the Inside Rust blog!</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2019/9/25/Welcome.html" type="text/html" title="Welcome to the Inside Rust blog!" />
        <published>2019-09-25T00:00:00Z</published>
        <updated>2019-09-25T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2019/9/25/Welcome.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2019/9/25/Welcome.html">&lt;p&gt;Welcome to the inaugural post of the &lt;strong&gt;Inside Rust&lt;/strong&gt; blog! This is a
new blog where the various Rust teams and working groups can post
updates about new developments. It's a great place to watch if you're
interested in following along with Rust development -- and a
particularly great place to watch if you're interested in contributing
to Rust. Expect to see updates on new projects, calls for help, design
notes, and other similar items. Thanks for reading!&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing the Docs.rs Team</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2019/12/9/announcing-the-docsrs-team.html" type="text/html" title="Announcing the Docs.rs Team" />
        <published>2019-12-09T00:00:00Z</published>
        <updated>2019-12-09T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2019/12/9/announcing-the-docsrs-team.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2019/12/9/announcing-the-docsrs-team.html">&lt;p&gt;Today we're announcing a brand new team: The Docs.rs Team!&lt;/p&gt;
&lt;p&gt;Previously, &lt;a href=&quot;https://docs.rs/&quot;&gt;Docs.rs&lt;/a&gt; has been managed by the Rustdoc Team, as many of the initial concerns of
Docs.rs were shared by Rustdoc as Docs.rs was being brought into team maintainership. However, as
time went on, those concerns started to diverge more and more, and so did the people who contributed
to either tool.&lt;/p&gt;
&lt;p&gt;The new Docs.rs Team will be responsible for the operations and development for &lt;a href=&quot;https://docs.rs/&quot;&gt;Docs.rs&lt;/a&gt;, leaving
the Rustdoc Team to be responsible for the Rustdoc tool itself. &lt;a href=&quot;https://github.com/QuietMisdreavus&quot;&gt;@QuietMisdreavus&lt;/a&gt; will be leading
the new Docs.rs Team, leaving &lt;a href=&quot;https://github.com/GuillaumeGomez&quot;&gt;@GuillaumeGomez&lt;/a&gt; to lead the Rustdoc Team.&lt;/p&gt;
&lt;p&gt;Joining QuietMisdreavus on the Docs.rs Team is GuillaumeGomez, coordinating work between Rustdoc and
Docs.rs; &lt;a href=&quot;https://github.com/onur&quot;&gt;@onur&lt;/a&gt;, the original creator of Docs.rs; &lt;a href=&quot;https://github.com/pietroalbini&quot;&gt;@pietroalbini&lt;/a&gt;, who has coordinated work in
Docs.rs from the perspective of the Infrastrucure Team; and introducing &lt;a href=&quot;https://github.com/jyn514&quot;&gt;@jyn514&lt;/a&gt;, who has worked to
improve the developer experience of contributing to Docs.rs by converting the local development
configuration to use &lt;code&gt;docker-compose&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;To get involved with either team, join us on Discord! The Rustdoc Team hangs out in &lt;a href=&quot;https://discord.gg/4yEYPuT&quot;&gt;&lt;code&gt;#rustdoc&lt;/code&gt;&lt;/a&gt;,
and the Docs.rs Team hangs out in &lt;a href=&quot;https://discord.gg/2k5vVWn&quot;&gt;&lt;code&gt;#docs-rs&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>QuietMisdreavus</name>
        </author>
    </entry>
    
    <entry>
        <title>2019-11-18 IDE team meeting</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2019/12/4/ide-future.html" type="text/html" title="2019-11-18 IDE team meeting" />
        <published>2019-12-04T00:00:00Z</published>
        <updated>2019-12-04T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2019/12/4/ide-future.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2019/12/4/ide-future.html">&lt;p&gt;Meeting run by nikomatsakis. Minutes written by nikomatsakis.
Attending: nikomatsakis, pnkfelix, Xanewok, matklad
&lt;a href=&quot;https://hackmd.io/fAnj6pNqRRGIyDQ4el5tcQ&quot;&gt;Notes&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;#the-rust-ide&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;the-rust-ide&quot;&gt;&lt;/a&gt;The Rust IDE&lt;/h1&gt;
&lt;p&gt;In the last compiler/IDE team meeting we've discussed the overall direction for IDE support in Rust.&lt;/p&gt;
&lt;p&gt;At the moment, the two IDEs developed as part of the Rust project are Rust Language Server (RLS) and rust-analyzer.
The former is currently being shipped with the Rust distribution while the latter serves as a foundation for the &amp;quot;RLS 2.0&amp;quot; working group.&lt;/p&gt;
&lt;p&gt;Unfortunately, these are actively developed in separation without much code-sharing between the two.
We'd like to change that and to find out how we can unify these efforts.
Therefore, we've been having a series of talks with the aim of elaborating the design space and creating a proposal for how to improve the situation going forward.&lt;/p&gt;
&lt;p&gt;This blog post gives a short summary from our most recent meeting.&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;#why-2-ides&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;why-2-ides&quot;&gt;&lt;/a&gt;Why 2 IDEs?&lt;/h1&gt;
&lt;p&gt;The main benefits of rust-analyzer is greater performance (because of fully-lazy compilation model) and somewhat richer feature-set (due to more flexible analysis API).
The main benefits of RLS is precision (it uses &lt;code&gt;rustc&lt;/code&gt; under the hood).
Additionally, RLS is the main consumer of save-analysis infrastructure, which is a good fit for tools which need a static view of the codebase, such as &lt;a href=&quot;https://github.com/rust-dev-tools/cargo-src&quot;&gt;cargo-src&lt;/a&gt; or &lt;a href=&quot;https://code.visualstudio.com/blogs/2019/02/19/lsif&quot;&gt;lsif&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;#save-analysis&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;save-analysis&quot;&gt;&lt;/a&gt;Save-analysis&lt;/h1&gt;
&lt;p&gt;What is &amp;quot;save-analysis&amp;quot;?
It is an unstable format which rustc uses to record information about the compiled code.
It contains a pretty high-level information.
For example, for each identifier in the source-crate, save-analyzer will map this identifier to a definition and list of usages.
&lt;code&gt;env RUSTFLAGS=&amp;quot;-Zunstable-options -Zsave-analysis&amp;quot; cargo check&lt;/code&gt; can be used to instruct &lt;code&gt;rustc&lt;/code&gt; to produce save-analysis files (in JSON format).
Because save-analysis is produced directly from rustc iternal data structures, it is guaranteed to be correct (modulo bugs in rustc itself).&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;#query-model&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;query-model&quot;&gt;&lt;/a&gt;Query model&lt;/h1&gt;
&lt;p&gt;The fundamental problem with save-analysis is that it is computed for the whole crate at once.
This is pretty slow for non-trivial crates, and is also wasteful.
At any given moment in time, only a small fraction of analysis information is really required.
rust-analyzer solves this by using &lt;a href=&quot;https://github.com/salsa-rs/salsa&quot;&gt;&lt;code&gt;salsa&lt;/code&gt;&lt;/a&gt; queries for code analysis.
The result is a compilation model which is fully lazy across the whole crate graph.
This model is similar to what rustc is using internally, but is more lazy both &amp;quot;vertically&amp;quot; and &amp;quot;horizontally&amp;quot;.
Vertically, &lt;code&gt;rustc&lt;/code&gt; starts to be incremental only after parsing and macro expansion; rust-analyzer is incremental on per-file basis.
Horizontally, &lt;code&gt;rustc&lt;/code&gt; compiles one crate at a time; rust-analyzer uses queries for the whole crate graph.&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;#way-forward&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;way-forward&quot;&gt;&lt;/a&gt;Way forward&lt;/h1&gt;
&lt;p&gt;Our current hypothesis is that it is possible to integrate both approaches without doubling the engineering effort.
Specifically, we will add an option to rust-analyzer to use save-analysis for find-usages and rename functionality.
That way, we'll get precise results for most important queries, without slowing down completion.
Unlike RLS, however, rust-analyzer will not link to rustc and instead will rely on cargo for running the compiler and producing save-analysis data.
If this approach works, we will consider freezing RLS and focusing fully on rust-analyzer.
Long term, the plan is to unify the save-analysis fallback path and the lazy analysis.&lt;/p&gt;
&lt;p&gt;In parallel to this RLS/rust-analyzer unification effort, we continue to pursue rustc library-ification, with a specific focus on traits solving (via chalk) and type inference.
&amp;quot;Library-ification&amp;quot; is a term we've been using for the process of extracting code out of rustc into re-usable libaries which can be shared by both rustc and rust-analyzer.
The goal is to use library-ification to gradually reduce the amount of duplicated code between rustc and rust-analyzer, with the goal of eventually either having a single code-base, or having the vast majority of the logic be shared.&lt;/p&gt;
</content>

        <author>
            <name>Aleksey Kladov, Igor Matuszewski</name>
        </author>
    </entry>
    
    <entry>
        <title>Governance Working Group Update</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2019/12/3/governance-wg-meeting.html" type="text/html" title="Governance Working Group Update" />
        <published>2019-12-03T00:00:00Z</published>
        <updated>2019-12-03T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2019/12/3/governance-wg-meeting.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2019/12/3/governance-wg-meeting.html">&lt;p&gt;Hello everyone! Two weeks ago the governance working group met. Here are the large issues we discussed and information on our next meeting.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit:&lt;/em&gt; This post was prepared last week but was accidentally not merged. Apologies for the short notice about the topic of this week's meeting! --nikomatsakis&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#large-issues-discussed&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;large-issues-discussed&quot;&gt;&lt;/a&gt;Large Issues Discussed&lt;/h2&gt;
&lt;p&gt;We reviewed the &lt;a href=&quot;https://rust-lang.github.io/rfcs/1068-rust-governance.html&quot;&gt;current governance RFC&lt;/a&gt; and noted governance items that have been added since the RFC was written. We also noted things that have changed or have just not happened, as well as things that could be improved. Please see the &lt;a href=&quot;https://github.com/rust-lang/wg-governance/blob/master/minutes/2019.11.19.md&quot;&gt;full notes&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#next-meeting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;next-meeting&quot;&gt;&lt;/a&gt;Next Meeting&lt;/h2&gt;
&lt;p&gt;Next meeting will be at &lt;strong&gt;22:00 UTC on Tuesday, December 3&lt;/strong&gt; and will be focused on the need for a &lt;a href=&quot;https://github.com/rust-lang/wg-governance/issues/4&quot;&gt;GitHub Access Policy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We'd like to encourage anyone who's interested, regardless of their
previous experience to come to the &lt;code&gt;#wg-governance&lt;/code&gt;
channel on Discord to attend the meeting. (Our meetings are done over a video
call with Zoom, but we use the Discord channel to organise ourselves).&lt;/p&gt;
&lt;p&gt;If there are other issues you would like to see us discuss or discuss with us, please mention them in a comment on &lt;a href=&quot;https://github.com/rust-lang/wg-governance/issues/29&quot;&gt;this GitHub issue&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Nell Shamrell-Harrington</name>
        </author>
    </entry>
    
</feed>
