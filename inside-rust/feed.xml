<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/inside-rust/" version="0.1.0">Inside Rust Blog</generator>
    <link href="https://blog.rust-lang.org/inside-rust/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/inside-rust/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/inside-rust/</id>
    <title>Inside Rust Blog</title>
    <subtitle>Want to follow along with Rust development? Curious how you might get involved? Take a look!</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2019-11-22T16:59:08Z</updated>

    
    <entry>
        <title>Upcoming compiler-team design meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2019/11/22/upcoming-compiler-team-design-meetings.html" type="text/html" title="Upcoming compiler-team design meetings" />
        <published>2019-11-22T00:00:00Z</published>
        <updated>2019-11-22T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2019/11/22/upcoming-compiler-team-design-meetings.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2019/11/22/upcoming-compiler-team-design-meetings.html">&lt;p&gt;In our &lt;a href=&quot;https://zulip-archive.rust-lang.org/131828tcompiler/03407planningmeeting20191122.html&quot;&gt;planning meeting today&lt;/a&gt;, the &lt;a href=&quot;https://www.rust-lang.org/governance/teams/compiler&quot;&gt;compiler team&lt;/a&gt; has scheduled our
next batch of upcoming design meetings. You can find the exact times
on the compiler team's &lt;a href=&quot;https://rust-lang.github.io/compiler-team/#meeting-calendar&quot;&gt;meeting calendar&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On Nov 29 (&lt;a href=&quot;https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=MjM3aGsxdXY0dHBybXBxZ3ZxOGp1ZjdicjEgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com&quot;&gt;calendar event&lt;/a&gt;), we will discuss
&lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/213&quot;&gt;rust-lang/compiler-team#213&lt;/a&gt;, a proposal to extend rustc's data
structures to enable outside crates to experiment with building a
Rust REPL.&lt;/li&gt;
&lt;li&gt;On Dec 6 (&lt;a href=&quot;https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=MTByaTZsZG1pZGI1Y2RqdGZ1cHV2djNncTEgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com&quot;&gt;calendar event&lt;/a&gt;), we will discuss
&lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/175&quot;&gt;rust-lang/compiler-team#175&lt;/a&gt;, which is a plan to modify the
&lt;code&gt;rustc_interface&lt;/code&gt; trait to enable end-to-end query support in the
compiler.&lt;/li&gt;
&lt;li&gt;On Dec 13 (&lt;a href=&quot;https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=MGxrb2p2cG9lNGFnYTIybWVtcGRoZzdjdmogNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com&quot;&gt;calendar event&lt;/a&gt;), we will discuss
&lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/222&quot;&gt;rust-lang/compiler-team#222&lt;/a&gt;, which is a roadmap and strategy for
eventually merging rustc, rust-analyzer, and the RLS into one
coherent set of projects.&lt;/li&gt;
&lt;li&gt;On Dec 20 (&lt;a href=&quot;https://www.google.com/url?q=https://github.com/rust-lang/compiler-team/issues/209&amp;sa=D&amp;ust=1574870064787000&amp;usg=AOvVaw1ep0jCGX9A8WsdRJwTLeTU&quot;&gt;calendar event&lt;/a&gt;), we will discuss
&lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/209&quot;&gt;rust-lang/compiler-team#209&lt;/a&gt;, which is a proposal to create a
&amp;quot;major changes process&amp;quot; for the compiler, to augment these design
meetings.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#did-you-know&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;did-you-know&quot;&gt;&lt;/a&gt;Did you know?&lt;/h3&gt;
&lt;p&gt;Most weeks, the compiler team has some sort of design meeting. These
meetings take place on Zulip and are open to all. Every 4 weeks, we do
a planning meeting to pick the next few meetings from the list of open
proposals. You can find &lt;a href=&quot;https://rust-lang.github.io/compiler-team/about/steering-meeting/&quot;&gt;more details about how the compiler-team
steering meeting process here&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>2019-11-19 Infrastructure Team Meeting</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2019/11/19/infra-team-meeting.html" type="text/html" title="2019-11-19 Infrastructure Team Meeting" />
        <published>2019-11-19T00:00:00Z</published>
        <updated>2019-11-19T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2019/11/19/infra-team-meeting.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2019/11/19/infra-team-meeting.html">&lt;p&gt;Meeting run by pietroalbini. Minutes written by pietroalbini.&lt;br /&gt;
Attending: alexcrichton, kennytm, Mark-Simulacrum, pietroalbini, shepmaster&lt;br /&gt;
&lt;a href=&quot;https://discordapp.com/channels/442252698964721669/443148319431065610/646409370095190016&quot;&gt;Start of the conversation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#migrating-cratesio-behind-cloudfront&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;migrating-cratesio-behind-cloudfront&quot;&gt;&lt;/a&gt;Migrating crates.io behind CloudFront&lt;/h2&gt;
&lt;p&gt;While static.crates.io (hosting the source code of all the published crates) is
behind CloudFront, that’s not true today for the crates.io web application.
This causes problems because crates.io is hosted on Heroku, which requires
pointing a CNAME to Heroku’s DNS. Unfortunately crates.io doesn’t use a
subdomain, which prevents us from using CNAMEs. All our DNS zones are on AWS
Route53, but AWS only supports CNAMEs on the apex pointing to other AWS
resources. Because of that, the crates.io DNS was managed on a different
service until today, causing maintenance issues on our end.&lt;/p&gt;
&lt;p&gt;The solution we’re working torwards is to put CloudFront in front of crates.io,
and that will finally allow us to migrate the crates.io domain to AWS.
pietroalbini is finishing the last infra touches, and we expect to deploy the
changes in the coming days.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#dns-management-with-terraform&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;dns-management-with-terraform&quot;&gt;&lt;/a&gt;DNS management with Terraform&lt;/h2&gt;
&lt;p&gt;pietroalbini announced to the rest of the team that he started working on
migrating the DNS records of our domains to Terraform. He already migrated the
zones of &lt;a href=&quot;https://github.com/rust-lang/simpleinfra/blob/master/terraform/services/dns/cratesio.com.tf&quot;&gt;cratesio.com&lt;/a&gt; and &lt;a href=&quot;https://github.com/rust-lang/simpleinfra/blob/master/terraform/services/dns/crates.io.tf&quot;&gt;crates.io&lt;/a&gt;, and he plans to migrate the other ones
over the coming weeks. pietroalbini also wrote &lt;a href=&quot;https://forge.rust-lang.org/infra/docs/dns.html&quot;&gt;documentation&lt;/a&gt; on this setup.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#another-github-actions-ci-configuration-prototype&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;another-github-actions-ci-configuration-prototype&quot;&gt;&lt;/a&gt;Another GitHub Actions CI configuration prototype&lt;/h2&gt;
&lt;p&gt;pietroalbini continued his investigation into another prototype for our new
GitHub Actions configuration. To reiterate, GitHub Actions doesn’t support
templates or includes, so the infrastructure team is looking into a way to
reduce duplication between our pipelines.&lt;/p&gt;
&lt;p&gt;Since the two prototypes presented at last week’s meeting weren’t liked by all
the team, pietroalbini continued experimenting, and the prototype presented
this week was based around YAML anchors, a standard YAML feature to reuse parts
of data inside a single file. Unfortunately GitHub Actions explicitly disables
YAML anchors, so pietroalbini wrote a small tool that pre-generates the
expanded configuration file and commits it into the repo.&lt;/p&gt;
&lt;p&gt;The team liked this approach much more, as it doesn’t introduce any new
configuration syntax while keeping the configuration files in a manageable
state. pietroalbini is going to polish the prototype and open a PR for it in
the coming days.&lt;/p&gt;
</content>

        <author>
            <name>Pietro Albini</name>
        </author>
    </entry>
    
    <entry>
        <title>2019-11-14 Compiler Team Triage Meeting</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2019/11/19/compiler-team-meeting.html" type="text/html" title="2019-11-14 Compiler Team Triage Meeting" />
        <published>2019-11-19T00:00:00Z</published>
        <updated>2019-11-19T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2019/11/19/compiler-team-meeting.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2019/11/19/compiler-team-meeting.html">&lt;p&gt;The compiler team had our weekly triage meeting on 2019-11-14.
You can find the &lt;a href=&quot;https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-11-14/&quot;&gt;minutes&lt;/a&gt; on the &lt;a href=&quot;https://github.com/rust-lang/compiler-team&quot;&gt;compiler-team&lt;/a&gt; repository.
Each week, we have general announcements from the team followed by check-ins from two of the compiler team working groups.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#announcements&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;announcements&quot;&gt;&lt;/a&gt;Announcements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Request for assistance: &amp;quot;Rustc panics (NoSolution): could not prove Binder(projection soup)&amp;quot; &lt;a href=&quot;https://github.com/rust-lang/rust/issues/65581&quot;&gt;#65581&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request for assistance: &amp;quot;Rust 1.38 regressions weren't fully triaged&amp;quot; &lt;a href=&quot;https://github.com/rust-lang/rust/issues/655577&quot;&gt;#65577&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request for assistance: &amp;quot;Miscompilation with target-cpu=znver1 (AMD Ryzen 1000/2000 series) on Windows + LLVM 9.&amp;quot; &lt;a href=&quot;https://github.com/rust-lang/rust/issues/63959&quot;&gt;#63959&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cjgillot&quot;&gt;@cjgillot&lt;/a&gt; replaced a lot of TypeFoldable impls with a derive &lt;a href=&quot;https://github.com/rust-lang/rust/pull/66384&quot;&gt;#66384&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Infra team has finished evaluating GitHub Actions and we're switching!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This will have a signficant, positive impact on CI build time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/centril&quot;&gt;@centril&lt;/a&gt; is fixing useless &lt;code&gt;&amp;lt;std macros&amp;gt;&lt;/code&gt; spans &lt;a href=&quot;https://github.com/rust-lang/rust/pull/66364&quot;&gt;#66364&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#working-group-sync&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;working-group-sync&quot;&gt;&lt;/a&gt;Working group sync&lt;/h2&gt;
&lt;p&gt;This week we heard from three working groups because we ran out of time in the previous meeting.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#wg-polonius&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;wg-polonius&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://rust-lang.github.io/compiler-team/working-groups/polonius/&quot;&gt;wg-polonius&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Made a lot of progress on the completeness goals with move/initialization errors and subset errors both getting close to completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed the last failure in the rustc test suite.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are still the same 2 OOMs as last time, we haven't had much time to look at those yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Made diagnostics output match NLL in a lot more cases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Did some cleanup in our terminology by picking better names for our atoms hopefully making it clearer in the process, and more work is planned here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;origin&amp;quot; instead of &amp;quot;region&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;path&amp;quot; instead of &amp;quot;MovePath&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is a &lt;a href=&quot;https://rust-lang.github.io/polonius/&quot;&gt;polonius book&lt;/a&gt; now! It's sparse at the moment but more documentation work is in-flight and planned.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The exploration and prototype on the rules offering more flow-sensitive precision for the analysis has also progressed a lot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There's also been some refactoring, and quite a bit of work on performance. Since the latter can step on the other work and vice-versa, we decided to focus on completeness first, and then after that has been achieved, re-adapt and land the optimization work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nikomatsakis&quot;&gt;@nikomatsakis&lt;/a&gt; did a presentation on Polonius at RustBelt Rust. &lt;a href=&quot;https://nikomatsakis.github.io/rust-belt-rust-2019/&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/albins&quot;&gt;@albins&lt;/a&gt; has finished their master's thesis and is currently rewriting most of the &lt;a href=&quot;https://rust-lang.zulipchat.com/user_uploads/4715/ufu5BGNrkzVbV8FtkK3Tco6M/Albins-Thesis-draft-version.pdf&quot;&gt;draft&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We hope to have a &amp;quot;polonius work week&amp;quot; at the end of November to push the in-progress work over the finish line together.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#wg-self-profile&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;wg-self-profile&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://rust-lang.github.io/compiler-team/working-groups/self-profile/&quot;&gt;wg-self-profile&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We've nearly completed our long standing MVP goal!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mark-simulacrum&quot;&gt;@simulacrum&lt;/a&gt; has done some nice work to polish the integration with perf.rlo&lt;/li&gt;
&lt;li&gt;We've added tracking for all the events we're aware of that should be traced with the exception of trait selection.
&lt;ul&gt;
&lt;li&gt;We could really use some input as to what would be helpful to track!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/michaelwoerister&quot;&gt;@mw&lt;/a&gt; has been working on some changes to the binary format we record events in.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The new format is more compact so results in a smaller trace file and hopefully less runtime overhead.&lt;/li&gt;
&lt;li&gt;The new format is also more amenable to recording query keys, which is a highly requested feature.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wesleywiser&quot;&gt;@wesleywiser&lt;/a&gt; has added some crate level docs to make getting into the code easier.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wesleywiser&quot;&gt;@wesleywiser&lt;/a&gt; also added code to record process id, start time, and arguments to the trace file which we've started using.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/andjo403&quot;&gt;@andjo403&lt;/a&gt; has been a roll with a lot of great PRs!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We now have a dedicated tool for generating flamegraphs directly so you don't have to use the Perl scripts anymore.&lt;/li&gt;
&lt;li&gt;Some internal refactoring that makes adding new tools easier.&lt;/li&gt;
&lt;li&gt;Lots of work on the Chromium dev tools exporter:
&lt;ul&gt;
&lt;li&gt;New option to collapse disjoint threads so it's a little more manageable&lt;/li&gt;
&lt;li&gt;New option to filter out small events under a configurable threshold (necessary for very large compilations)&lt;/li&gt;
&lt;li&gt;You can now have multiple crate compilations in the same export file. This is similar to what cargo build -Z timings can do but much more detailed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#wg-rls-20&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;wg-rls-20&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://rust-lang.github.io/compiler-team/working-groups/rls-2.0/&quot;&gt;wg-rls-2.0&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Work is procedding on splitting core of rust-analyzer into crates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find usages is implemented.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Macro expansion now can map source ranges to expanded ranges, so goto def correctly goes &amp;quot;inside&amp;quot; macro call.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More chalk an type inference work, specifically, support for closures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There's ongoing discussion about the general planning about rustc, rls, and rust-analyzer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Wesley Wiser</name>
        </author>
    </entry>
    
    <entry>
        <title>2019-11-12 Infrastructure Team Meeting</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2019/11/18/infra-team-meeting.html" type="text/html" title="2019-11-12 Infrastructure Team Meeting" />
        <published>2019-11-18T00:00:00Z</published>
        <updated>2019-11-18T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2019/11/18/infra-team-meeting.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2019/11/18/infra-team-meeting.html">&lt;p&gt;Meeting run by pietroalbini. Minutes written by pietroalbini.
Attending: alexcrichton, kennytm, Mark-Simulacrum, pietroalbini, sgrif, shepmaster
&lt;a href=&quot;https://discordapp.com/channels/442252698964721669/443148319431065610/643872655312683018&quot;&gt;Start of the conversation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#rust-114.0-cargo-artifacts-on-the-rust-lang-ci-s3-bucket&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;rust-114.0-cargo-artifacts-on-the-rust-lang-ci-s3-bucket&quot;&gt;&lt;/a&gt;Rust 1.14.0 Cargo artifacts on the rust-lang-ci S3 bucket&lt;/h2&gt;
&lt;p&gt;Following on last meeting’s topics, pietroalbini investigate whether it would
be possible to redirect requests for Cargo 1.14.0 from the &lt;code&gt;rust-lang-ci&lt;/code&gt; S3
bucket to our CDN. The answer is no, as the S3 support for redirects requires a
different endpoint than the one included in the manifest. The two main courses
of action were to nothing (keeping the files in the &lt;code&gt;rust-lang-ci&lt;/code&gt; S3 bucket),
or to rewrite and resign the manifest of Rust 1.14.0 to point to the CDN.&lt;/p&gt;
&lt;p&gt;Mark-Simulacrum was in favor of doing nothing, but pietroalbini pointed out
keeping releases in two different places will make mirroring and caching
efforts more complex, as mirror authors will have to special-case a separate
domain just for a release. We then decided to rewrite and resing the manifest.&lt;/p&gt;
&lt;p&gt;shepmaster proposed to add a test somewhere to ensure this doesn’t happen
again, but nobody on the team had the time to do this. If someone is interested
please ask in the infra channel.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#deduplicating-ci-configuration-on-github-actions&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;deduplicating-ci-configuration-on-github-actions&quot;&gt;&lt;/a&gt;Deduplicating CI configuration on GitHub Actions&lt;/h2&gt;
&lt;p&gt;One issue about GitHub Actions is it doesn’t allow to include shared pieces of
configuration into workflows, forcing us to duplicate (for example) the steps
needed to complete a build. pietroalbini investigated a few ways to work around
the limitation, and the options he presented during the meeting are either
writing our own configuration format and having a tool generate the GitHub
Actions configuration from it, or duplicating the configuration manually and
having a tool to ensure the manually duplicated things don’t diverge.&lt;/p&gt;
&lt;p&gt;The rest of the team expressed concerns with generating the configuration, as
using the generator adds even more complexity to our already complex CI. On the
other hand pietroalbini didn’t like the tool to ensure the configuration
doesn’t diverge, as that would make changes to the CI configuration harder for
the people doing it. The agreement in the meeting is that pietroalbini will try
to create other proof of concepts, hoping to find a better solution.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#new-server-for-perf&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;new-server-for-perf&quot;&gt;&lt;/a&gt;New server for perf&lt;/h2&gt;
&lt;p&gt;alexcrichton didn’t hear back from Hetzner about the new perf server yet.&lt;/p&gt;
</content>

        <author>
            <name>Pietro Albini</name>
        </author>
    </entry>
    
    <entry>
        <title>Evaluating GitHub Actions</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2019/11/14/evaluating-github-actions.html" type="text/html" title="Evaluating GitHub Actions" />
        <published>2019-11-14T00:00:00Z</published>
        <updated>2019-11-14T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2019/11/14/evaluating-github-actions.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2019/11/14/evaluating-github-actions.html">&lt;p&gt;The Rust Infrastructure team is happy to announce that we’re starting an
evaluation of &lt;a href=&quot;https://github.com/features/actions&quot;&gt;GitHub Actions&lt;/a&gt; as a
replacement for Azure Pipelines as the CI provider of the
&lt;a href=&quot;https://github.com/rust-lang/rust&quot;&gt;rust-lang/rust&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;We’ve been part of the beta of GitHub Actions since the beginning, following
its development closely and testing it on a lot of smaller repositories in our
organization, and we’re really satisfied so far with the product. GitHub
Actions provides most of the features we love about Azure Pipelines, while
being integrated with GitHub’s UI, permissions and workflows.&lt;/p&gt;
&lt;p&gt;GitHub has also offered to sponsor a dedicated pool of builders with increased
resources. Our extensive but time-consuming CI is one of the major pain points
for compiler contributors, and the additional resources have the potential to
drastically improve our developers’ experience. We have achieved 60% faster
builds in preliminary testing thanks to the increased core count in the
dedicated builder pool, and there is still large room to parallelize and finish
builds even faster.&lt;/p&gt;
&lt;p&gt;Our plan is to start running GitHub Actions in parallel with Azure Pipelines in
the next few weeks, and we’ll keep the community updated as we learn more.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;[Update]&lt;/strong&gt; Some members of the community asked why we're considering to
switch away from Azure Pipelines so soon after migrating to it. We want to
reaffirm that we're happy with Pipelines as a product, but both Microsoft and
GitHub asked us to try GitHub Actions because it's more closely integrated into
the GitHub workflow that we already use. After we used it for a while in other
repositories we were satisfied enough to start evaluating a migration for
rustc's CI.&lt;/p&gt;
</content>

        <author>
            <name>Pietro Albini</name>
        </author>
    </entry>
    
    <entry>
        <title>Governance WG Call For Participation</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2019/11/13/goverance-wg-cfp.html" type="text/html" title="Governance WG Call For Participation" />
        <published>2019-11-13T00:00:00Z</published>
        <updated>2019-11-13T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2019/11/13/goverance-wg-cfp.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2019/11/13/goverance-wg-cfp.html">&lt;p&gt;Hello everyone, the governance working group has been working a few efforts, but
we haven't made as much progress as we would have liked over the past few
months, so we are going to try out a new process and meeting agenda aimed at
trying to get more work done in the time we know we have.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#new-meeting-structure&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;new-meeting-structure&quot;&gt;&lt;/a&gt;New Meeting Structure&lt;/h2&gt;
&lt;p&gt;Previously we have been doing most of our work async while using our bi-weekly
meeting call to triage tasks. The problem we ran into with this is that a lot of
the members also heavy contributors to the Rust project as a whole, and it can
be can hard for some people to schedule time write an initial draft.&lt;/p&gt;
&lt;p&gt;To address this instead of triaging during the meeting and working on tasks in
async, we're going to hold focused topic based meetings, and use the time between
meetings, to publish posts like this and to research and prepare for the next
topic. To help do this we're going to extend our current meeting duration from
30 minutes to an hour. (The meeting will still be every two weeks.)&lt;/p&gt;
&lt;p&gt;The current goals are to documenting the de-facto governance structure, provide
the result as a RFC and then if merged provide a version on
&lt;a href=&quot;https://forge.rust-lang.org/&quot;&gt;forge.rust-lang.org&lt;/a&gt; so that it has greater visbility. We also want to
schedule people involved in Rust and other governance structures to come and
talk about their experiences.&lt;/p&gt;
&lt;p&gt;For deciding what topics, we're going to rotate who takes the lead for each
meeting. It's that person's responsibility to decide the topic and to
prepare a call for participation similar to this post informing people of
the topic and how they might best prepare if they wish to join.&lt;/p&gt;
&lt;p&gt;We also hope that having a focused topic will reduce any barrier of expected
knowledge in order to participate and contribute. With that said let's talk
about the topic for next meeting.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#reviewing--examining-previous-governance-rfcs&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;reviewing--examining-previous-governance-rfcs&quot;&gt;&lt;/a&gt;Reviewing &amp;amp; Examining Previous Governance RFCs&lt;/h2&gt;
&lt;p&gt;Our first topic for new meeting is going to be to read &lt;a href=&quot;https://rust-lang.github.io/rfcs/1068-rust-governance.html&quot;&gt;RFC 1068&lt;/a&gt;, the
original Rust Governance RFC, review how accurate it is to today's structure,
and see any if there are questions that we have that it doesn't answer. Here
are some other relevant RFCs for additional context:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/26197104b7bb9a5a35db243d639aee6e46d35d75/text/1728-north-star.md&quot;&gt;&amp;quot;North Star&amp;quot; RFC&lt;/a&gt; lays out the Rust roadmap process.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rust-lang.github.io/rfcs/2689-compiler-team-contributors.html&quot;&gt;Compiler contributors RFC&lt;/a&gt; details the process of contributing to the
compiler and progression towards joining the compiler team.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rust-lang.github.io/rfcs/1589-rustc-bug-fix-procedure.html&quot;&gt;Compiler bug fix procedure&lt;/a&gt; defines the best practices for making a bug fix
to the compiler.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our next meeting is going to be at &lt;strong&gt;22:00 UTC on Tuesday, November 19th&lt;/strong&gt;
and we'd like to encourage anyone who's interested, regardless of their
previous experience to read those RFCs and come to the &lt;code&gt;#wg-governance&lt;/code&gt;
channel on discord to attend the meeting. (Our meetings are done over a video
call with Zoom, but we use the discord channel to organise ourselves).&lt;/p&gt;
&lt;p&gt;If some reason you know you won't be able to attend these meetings but would
still like to participate. Please feel free to post any questions about Rust's
governance as &lt;a href=&quot;https://github.com/rust-lang/wg-governance/issues?q=is%3Aissue+is%3Aopen+label%3AQuestion&quot;&gt;issues on our GitHub repository&lt;/a&gt;, even if you are
not available to attend the working group's meetings.&lt;/p&gt;
</content>

        <author>
            <name>Erin Power</name>
        </author>
    </entry>
    
    <entry>
        <title>2019-11-07 Compiler Team Triage Meeting</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2019/11/11/compiler-team-meeting.html" type="text/html" title="2019-11-07 Compiler Team Triage Meeting" />
        <published>2019-11-11T00:00:00Z</published>
        <updated>2019-11-11T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2019/11/11/compiler-team-meeting.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2019/11/11/compiler-team-meeting.html">&lt;p&gt;The compiler team had our weekly triage meeting on 2019-11-07.
You can find the &lt;a href=&quot;https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-11-07/&quot;&gt;minutes&lt;/a&gt; on the &lt;a href=&quot;https://github.com/rust-lang/compiler-team&quot;&gt;compiler-team&lt;/a&gt; repository.
Each week, we have general announcements from the team followed by check-ins from two of the compiler team working groups.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#announcements&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;announcements&quot;&gt;&lt;/a&gt;Announcements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/pnkfelix&quot;&gt;@pnkfelix&lt;/a&gt; is moving to the US and will be working in the Eastern timezone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wesleywiser&quot;&gt;@wesleywiser&lt;/a&gt; has been working on the constant propagation pass and wants to &lt;a href=&quot;https://github.com/rust-lang/rust/pull/66074&quot;&gt;turn it on&lt;/a&gt; for debug &amp;amp; release builds to improve compilation time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rust 1.39 has shipped with &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; support and other goodies.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#working-group-sync&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;working-group-sync&quot;&gt;&lt;/a&gt;Working group sync&lt;/h2&gt;
&lt;br/&gt;
&lt;h3&gt;&lt;a href=&quot;#wg-polonius&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;wg-polonius&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://rust-lang.github.io/compiler-team/working-groups/polonius/&quot;&gt;wg-polonius&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We ran out of time this week to have a check-in from this working group.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#wg-rfc-2229&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;wg-rfc-2229&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://rust-lang.github.io/compiler-team/working-groups/rfc-2229/&quot;&gt;wg-rfc-2229&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This working group is currently on a pause.&lt;/p&gt;
</content>

        <author>
            <name>Wesley Wiser</name>
        </author>
    </entry>
    
    <entry>
        <title>2019-10-31 Compiler Team Triage Meeting</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2019/11/07/compiler-team-meeting.html" type="text/html" title="2019-10-31 Compiler Team Triage Meeting" />
        <published>2019-11-07T00:00:00Z</published>
        <updated>2019-11-07T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2019/11/07/compiler-team-meeting.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2019/11/07/compiler-team-meeting.html">&lt;p&gt;The compiler team had our weekly triage meeting on 2019-10-31.
You can find the &lt;a href=&quot;https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2019-10-31/&quot;&gt;minutes&lt;/a&gt; on the &lt;a href=&quot;https://github.com/rust-lang/compiler-team&quot;&gt;compiler-team&lt;/a&gt; repository.
Each week, we have general announcements from the team followed by check-ins from two of the compiler team working groups.&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;#2019-10-31&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;2019-10-31&quot;&gt;&lt;/a&gt;2019-10-31&lt;/h1&gt;
&lt;h2&gt;&lt;a href=&quot;#announcments&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;announcments&quot;&gt;&lt;/a&gt;Announcments&lt;/h2&gt;
&lt;p&gt;Rust 1.39 ships on Thursday!&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#working-group-sync&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;working-group-sync&quot;&gt;&lt;/a&gt;Working group sync&lt;/h2&gt;
&lt;br/&gt;
&lt;h3&gt;&lt;a href=&quot;#wg-pgo&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;wg-pgo&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://rust-lang.github.io/compiler-team/working-groups/pgo/&quot;&gt;wg-pgo&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PGO is available in the stable compiler. Docs are in the rustc-guide and the rustc-book&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unfortunately we don't observe significant performance gains from applying it (except for tiny synthetic test cases).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/michaelwoerister&quot;&gt;@michaelwoerister&lt;/a&gt; asked for people to try PGO on irlo but haven't gotten a lot of feedback.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is one interesting theory that Rust doesn't profit as much as C++ because it defaults to having fewer compilation units and thus can make better inlining decisions in the non-PGO case.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The working group will probably wind down as &lt;a href=&quot;https://github.com/michaelwoerister&quot;&gt;@michaelwoerister&lt;/a&gt; don't have time to pursue further and there are no actual known issues in the implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/weekly.20meeting.202019-10-31.20.2354818/near/179539153&quot;&gt;Link to full discussion&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#wg-pipelining&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;wg-pipelining&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://rust-lang.github.io/compiler-team/working-groups/pipelining/&quot;&gt;wg-pipelining&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pipelining support has shipped in Rust 1.38.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The working group is winding down.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/weekly.20meeting.202019-10-31.20.2354818/near/179539371&quot;&gt;Link to full discussion&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>Wesley Wiser</name>
        </author>
    </entry>
    
    <entry>
        <title>2019-11-05 Infrastructure Team Meeting</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2019/11/06/infra-team-meeting.html" type="text/html" title="2019-11-05 Infrastructure Team Meeting" />
        <published>2019-11-06T00:00:00Z</published>
        <updated>2019-11-06T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2019/11/06/infra-team-meeting.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2019/11/06/infra-team-meeting.html">&lt;p&gt;Meeting run by shepmaster. Minutes written by pietroalbini.&lt;br /&gt;
Attending: aidanhs, alexcrichton, kennytm, Mark-Simulacrum, pietroalbini, shepmaster&lt;br /&gt;
&lt;a href=&quot;https://discordapp.com/channels/442252698964721669/443148319431065610/641335927721033732&quot;&gt;Start of the conversation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#removing-msys2-ca-certificates-workaround-p-high-issue)&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;removing-msys2-ca-certificates-workaround-p-high-issue)&quot;&gt;&lt;/a&gt;Removing MSYS2 ca-certificates workaround (P-high issue)&lt;/h2&gt;
&lt;p&gt;A few weeks ago our CI broke due to a broken &lt;code&gt;ca-certificates&lt;/code&gt; MSYS2 package,
which caused all Windows builders to fail. The temporary patch was to install a
vendored copy of that package, and since it’s not needed anymore pietroalbini
landed a PR this week removing the hack from our CI configuration.&lt;/p&gt;
&lt;p&gt;The other part of the issue is figuring out whether to vendor MSYS2 and MinGW
as a whole, but there is the issue of keeping the mirrors sort of up to date,
and we don’t have a clear idea on how to fix that at the moment. We decided to
downgrade the issue to P-medium and to talk about mirroring and vendoring at
the All Hands 2020. In preparation of that meeting it will be useful to audit
what we mirror at the moment and how old that is, but it’s not urgent and
nobody has the time to work on it right now.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#figuring-out-data-retention-on-azure-pipelines-p-medium-issue)&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;figuring-out-data-retention-on-azure-pipelines-p-medium-issue)&quot;&gt;&lt;/a&gt;Figuring out data retention on Azure Pipelines (P-medium issue)&lt;/h2&gt;
&lt;p&gt;This is not yet an issue, as the current retention is configured to 2 years.
We’re waiting on some talks with Microsoft to settle before starting to poke
people about this again.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#re-enable-llvmdebug-assertions-on-slow-builders-(p-medium-issue)&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;re-enable-llvmdebug-assertions-on-slow-builders-(p-medium-issue)&quot;&gt;&lt;/a&gt;Re-enable LLVM/debug assertions on slow builders (P-medium issue)&lt;/h2&gt;
&lt;p&gt;We still don’t have the time budget to enable them back, but increasing the
core count should allow us to do that.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#new-server-for-perf&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;new-server-for-perf&quot;&gt;&lt;/a&gt;New server for perf&lt;/h2&gt;
&lt;p&gt;alexcrichton ordered an
&lt;a href=&quot;https://www.hetzner.com/dedicated-rootserver/ax41-nvme&quot;&gt;AX41-NVMe&lt;/a&gt; bare metal
server from Hetzner as a replacement benchmarking machine for perf, paid by
Mozilla. We’re waiting on Hetzner to give us access to it before simulacrum can
try it out and configure it. If we don’t get access in a few days alexcrichton
is going to ping them.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#lifecycle-policy-for-staticrust-lang.org&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;lifecycle-policy-for-staticrust-lang.org&quot;&gt;&lt;/a&gt;Lifecycle policy for static.rust-lang.org&lt;/h2&gt;
&lt;p&gt;static.rust-lang.org is backed by a S3 bucket, and since 2016 versioning is
enabled on the bucket to prevent issues with accidental file deletions. Some of
the files in that bucket are overridden each day though (for example nightly
compilers), keeping a bunch of past versions stored. Those past versions are
useless as there isn’t an easy way to get them from the CDN, and the files are
also stored separately in other places on that bucket. Everyone agreed we
should enable lifecycle policy to delete those useless files, and we reached a
consensus on deleting them after three months. This won’t be noticeable by end
users, installing old nightlies by date will still work.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#what-to-do-with-the-rust-lang-ci-s3-bucket&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;what-to-do-with-the-rust-lang-ci-s3-bucket&quot;&gt;&lt;/a&gt;What to do with the rust-lang-ci S3 bucket&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;rust-lang-ci&lt;/code&gt; is a really old and currently unused S3 bucket which was used to
store CI artifacts before we migrated them to &lt;code&gt;rust-lang-ci2&lt;/code&gt;. There are still
some files in there, so we enabled bucket logging for a month to see how
frequent files there were accessed.&lt;/p&gt;
&lt;p&gt;Turns out, we had a total of 86 successful requests in a month, split between:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;69 requests were accessing cargo builds of 1.14.0&lt;/li&gt;
&lt;li&gt;17 requests were accessing old CI mirrors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Due to the low traffic we decided to remove those old CI mirrors, but for the
cargo builds the question is more complicated. Due to a bug in the manifest
generation back then, installing Rust 1.14.0 from rustup actually downloads
Cargo from the bucket instead of the CDN, and removing those files would
permanently break installing Rust 1.14.0. There was disagreement on whether to
do that inside the team, and we reached the decision to wait until pietroalbini
investigates whether redirects are feasible to configure in S3.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#early-feedback-on-pietroalbinis-wip-ci-generate-branch&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;early-feedback-on-pietroalbinis-wip-ci-generate-branch&quot;&gt;&lt;/a&gt;Early feedback on pietroalbini’s WIP ci-generate branch&lt;/h2&gt;
&lt;p&gt;pietroalbini is working on a branch that implements a generator for our CI
configuration, from a simplified custom DSL
(&lt;a href=&quot;https://github.com/pietroalbini/rust/tree/ci-generate&quot;&gt;branch&lt;/a&gt; -
&lt;a href=&quot;https://github.com/pietroalbini/rust/tree/ci-generate/src/tools/generate-ci-config&quot;&gt;documentation&lt;/a&gt;).
While the generator has a number of small benefits for us, the main driver
between the creation of the branch is to work around some limitations in GitHub
Actions’s configuration syntax, namely the lack of importable templates. There
wasn’t time to properly discuss this so we deferred to next week.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#revisiting-meeting-run-rotation&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;revisiting-meeting-run-rotation&quot;&gt;&lt;/a&gt;Revisiting meeting run rotation&lt;/h2&gt;
&lt;p&gt;A month ago we started rotating who runs the meetings, intending to revisit the
decision today. The team felt either neutral or positive about the idea, so
we’ll keep doing that for a while. aidanhs is going to run the next meeting.&lt;/p&gt;
</content>

        <author>
            <name>Pietro Albini</name>
        </author>
    </entry>
    
    <entry>
        <title>Clippy is removing its plugin interface</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2019/11/04/Clippy-removes-plugin-interface.html" type="text/html" title="Clippy is removing its plugin interface" />
        <published>2019-11-04T00:00:00Z</published>
        <updated>2019-11-04T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2019/11/04/Clippy-removes-plugin-interface.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2019/11/04/Clippy-removes-plugin-interface.html">&lt;p&gt;Today, we're announcing that Clippy will completely remove its plugin interface.
Using the plugin interface has been deprecated for about one and a half year now
(&lt;a href=&quot;https://github.com/rust-lang/rust-clippy/pull/2712&quot;&gt;rust-lang/rust-clippy#2712&lt;/a&gt;). Since then, an unsilenceable warning has been
emitted. Now that compiler plugins are officially deprecated
(&lt;a href=&quot;https://github.com/rust-lang/rust/pull/64675&quot;&gt;rust-lang/rust#64675&lt;/a&gt;), Clippy will remove its support for the plugin
interface completely (&lt;a href=&quot;https://github.com/rust-lang/rust-clippy/pull/4714&quot;&gt;rust-lang/rust-clippy#4714&lt;/a&gt;). This change will hit stable
with version 1.41.0.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#does-this-post-affect-me&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;does-this-post-affect-me&quot;&gt;&lt;/a&gt;Does this post affect me?&lt;/h3&gt;
&lt;p&gt;Most likely, no. This post only affects you, if you're still using Clippy
through its plugin interface. If you do so, you get the warning&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;warning: the clippy plugin is being deprecated, please use cargo clippy or rls with the clippy feature
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when compiling your crate. If you don't see this warning, nothing will change
for you.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#how-do-i-migrate-from-the-plugin-interface&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;how-do-i-migrate-from-the-plugin-interface&quot;&gt;&lt;/a&gt;How do I migrate from the plugin interface?&lt;/h3&gt;
&lt;p&gt;If you are still using the Clippy plugin interface, here are some steps you can
take to migrate to &lt;code&gt;cargo clippy&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Cargo.toml&lt;/code&gt;: Remove every occurrence of the &lt;code&gt;clippy&lt;/code&gt; dependency and the
&lt;code&gt;clippy&lt;/code&gt; feature.&lt;/li&gt;
&lt;li&gt;Completely remove every occurrence of &lt;code&gt;feature(plugin)&lt;/code&gt; and &lt;code&gt;plugin(clippy)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Replace every occurrence of &lt;code&gt;feature = &amp;quot;clippy&amp;quot;&lt;/code&gt; with &lt;code&gt;feature = &amp;quot;cargo-clippy&amp;quot;&lt;/code&gt;. The &lt;code&gt;cargo-clippy&lt;/code&gt; feature is automatically enabled when
running &lt;code&gt;cargo clippy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;CI: You now have to install Clippy via rustup, with &lt;code&gt;rustup component add clippy&lt;/code&gt;. Once installed, you can run &lt;code&gt;cargo clippy&lt;/code&gt; (for more usage
instructions, see the &lt;a href=&quot;https://github.com/rust-lang/rust-clippy#usage&quot;&gt;Clippy &lt;code&gt;README&lt;/code&gt;&lt;/a&gt;). Note that Clippy is not included in
every nightly, but you can check its availability on the &lt;a href=&quot;https://rust-lang.github.io/rustup-components-history/index.html&quot;&gt;rustup components
history&lt;/a&gt; page.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;a href=&quot;#where-should-i-go-if-i-have-more-questions&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;where-should-i-go-if-i-have-more-questions&quot;&gt;&lt;/a&gt;Where should I go if I have more questions?&lt;/h3&gt;
&lt;p&gt;If you need help with migrating from the plugin interface, you can contact us
via &lt;a href=&quot;https://discord.gg/vNNtpyD&quot;&gt;Discord&lt;/a&gt; or open an issue on &lt;a href=&quot;https://github.com/rust-lang/rust-clippy/issues/new&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Philipp Krones</name>
        </author>
    </entry>
    
</feed>
