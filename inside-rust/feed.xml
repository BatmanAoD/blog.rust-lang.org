<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/inside-rust/" version="0.1.0">Inside Rust Blog</generator>
    <link href="https://blog.rust-lang.org/inside-rust/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/inside-rust/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/inside-rust/</id>
    <title>Inside Rust Blog</title>
    <subtitle>Want to follow along with Rust development? Curious how you might get involved? Take a look!</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2020-01-30T16:23:55Z</updated>

    
    <entry>
        <title>Upcoming compiler-team design meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/01/24/upcoming-compiler-team-design-meetings.html" type="text/html" title="Upcoming compiler-team design meetings" />
        <published>2020-01-24T00:00:00Z</published>
        <updated>2020-01-24T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/01/24/upcoming-compiler-team-design-meetings.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/01/24/upcoming-compiler-team-design-meetings.html">&lt;p&gt;In our &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/planning.20meeting.202019.2E01.2E17&quot;&gt;planning meeting on January 17&lt;/a&gt;, the &lt;a href=&quot;https://www.rust-lang.org/governance/teams/compiler&quot;&gt;compiler team&lt;/a&gt; has scheduled our
next batch of upcoming design meetings. You can find the exact times
on the compiler team's &lt;a href=&quot;https://rust-lang.github.io/compiler-team/#meeting-calendar&quot;&gt;meeting calendar&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On Feb 7th (&lt;a href=&quot;https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=Mmk4NmZqaWVtcHVmZDRmanZob3ZrMXJ1N28gNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com&quot;&gt;calendar event&lt;/a&gt;), we will discuss
&lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/237&quot;&gt;rust-lang/compiler-team#237&lt;/a&gt;, which describes some potential ways
to extract a Rust parser that can be shared between rustc and
rust-analyzer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#did-you-know&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;did-you-know&quot;&gt;&lt;/a&gt;Did you know?&lt;/h3&gt;
&lt;p&gt;Most weeks, the compiler team has some sort of design meeting. These
meetings take place on Zulip and are open to all. Every 4 weeks, we do
a planning meeting to pick the next few meetings from the list of open
proposals. You can find &lt;a href=&quot;https://rust-lang.github.io/compiler-team/about/steering-meeting/&quot;&gt;more details about how the compiler-team
steering meeting process here&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>February Lang Team Design Meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/01/24/feb-lang-team-design-meetings.html" type="text/html" title="February Lang Team Design Meetings" />
        <published>2020-01-24T00:00:00Z</published>
        <updated>2020-01-24T00:00:01Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/01/24/feb-lang-team-design-meetings.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/01/24/feb-lang-team-design-meetings.html">&lt;p&gt;We've scheduled our &lt;strong&gt;language team design meetings&lt;/strong&gt; for February. The current plans are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;February 3rd -- we will do an overview of &lt;strong&gt;specialization&lt;/strong&gt;. We'll cover details from the RFC but in particular talk about the &lt;a href=&quot;http://aturon.github.io/tech/2018/04/05/sound-specialization/&quot;&gt;as-yet-unimplemented plans to make it sound&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;February 10th -- we will cover interactions between the &lt;code&gt;&amp;amp;T&lt;/code&gt; type and LLVM's dereferenceable attribute, such as &lt;a href=&quot;https://github.com/rust-lang/rust/issues/55005&quot;&gt;rust-lang/rust#55005&lt;/a&gt; and &lt;a href=&quot;https://github.com/japaric/volatile-register/issues/10&quot;&gt;problems modeling MMIO&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;February 17th -- no meeting, it is President's Day in the US and many of us are absent&lt;/li&gt;
&lt;li&gt;February 24th -- we will summarize discussions from &lt;a href=&quot;https://github.com/rust-lang/project-ffi-unwind&quot;&gt;the ffi-unwind project group&lt;/a&gt; about whether we should permit foreign exceptions to propagate across the &amp;quot;C&amp;quot; ABI boundary, or establish a separate ABI (e.g., &amp;quot;C unwind&amp;quot;) for such cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#about-the-language-team-design-meetings&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;about-the-language-team-design-meetings&quot;&gt;&lt;/a&gt;About the language team design meetings&lt;/h2&gt;
&lt;p&gt;The idea of the design meeting is that it's a time for us to have
in-depth discussions on some particular topic. This might be a burning
problem that we've discovered, an update on some existing design work,
or a forward looking proposal.&lt;/p&gt;
&lt;p&gt;The meetings are open for anyone to listen in and attend. They are
typically also recorded and posted online, along with minutes, after
the fact. They generally take place on Mondays at &amp;quot;noon Boston time&amp;quot;
-- but for the precise scheduling you should check the &lt;a href=&quot;https://github.com/rust-lang/lang-team/#meeting-calendar&quot;&gt;lang team
calendar&lt;/a&gt;. Scheduled meetings are subject to change and
cancelation. In that case, the calendar events will be updated.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>cargo-audit v0.11: Introducing the `fix` feature, yanked crate detection, and more</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/01/23/Introducing-cargo-audit-fix-and-more.html" type="text/html" title="cargo-audit v0.11: Introducing the `fix` feature, yanked crate detection, and more" />
        <published>2020-01-23T00:00:00Z</published>
        <updated>2020-01-23T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/01/23/Introducing-cargo-audit-fix-and-more.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/01/23/Introducing-cargo-audit-fix-and-more.html">&lt;p&gt;&lt;a href=&quot;https://github.com/rustsec/cargo-audit&quot;&gt;cargo-audit&lt;/a&gt; is a command-line utility which inspects &lt;code&gt;Cargo.lock&lt;/code&gt; files and compares them against the &lt;a href=&quot;https://rustsec.org&quot;&gt;RustSec Advisory Database&lt;/a&gt;, a community database of security vulnerabilities maintained by the &lt;a href=&quot;https://github.com/rust-secure-code/wg&quot;&gt;Rust Secure Code Working Group&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post describes the new features in the 0.11 release of &lt;code&gt;cargo-audit&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#cargo-audit-fix-automatically-update-vulnerable-dependencies&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;cargo-audit-fix-automatically-update-vulnerable-dependencies&quot;&gt;&lt;/a&gt;&lt;code&gt;cargo audit fix&lt;/code&gt;: automatically update vulnerable dependencies&lt;/h2&gt;
&lt;p&gt;One of our &lt;a href=&quot;https://github.com/RustSec/cargo-audit/issues/23&quot;&gt;most requested features&lt;/a&gt; (especially by fans of the similar &lt;a href=&quot;https://docs.npmjs.com/cli/audit&quot;&gt;&lt;code&gt;npm audit fix&lt;/code&gt;&lt;/a&gt; command), the &lt;a href=&quot;https://github.com/RustSec/cargo-audit#cargo-audit-fix-subcommand&quot;&gt;new &lt;code&gt;cargo audit fix&lt;/code&gt; subcommand&lt;/a&gt; will attempt to automatically update version requirements for vulnerable dependencies to non-vulnerable versions.&lt;/p&gt;
&lt;p&gt;Note that this is an experimental new feature which isn't enabled by default. To try it out, install &lt;code&gt;cargo-audit&lt;/code&gt; with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cargo install cargo-audit --features=fix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will perform the same audit process as &lt;code&gt;cargo audit&lt;/code&gt; initially, and then attempt to apply fixes to your &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/RustSec/cargo-audit/c857beb/img/screenshot-fix.png&quot; alt=&quot;cargo audit fix screenshot&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Under the hood, it uses &lt;a href=&quot;https://github.com/killercup/cargo-edit&quot;&gt;cargo-edit&lt;/a&gt; (as a library) to perform modifications to your &lt;code&gt;Cargo.toml&lt;/code&gt; file, using the fixed version requirements listed in the advisory to try to perform an automatic upgrade to a non-vulnerable version of a dependency for each advisory.&lt;/p&gt;
&lt;p&gt;Note once more that this is a &lt;em&gt;new, experimental feature&lt;/em&gt; and as such it's bound to have bugs. If you're worried, you can use &lt;code&gt;cargo audit fix --dry-run&lt;/code&gt; to perform a dry run only. And if you do encounter bugs, please &lt;a href=&quot;https://github.com/rustsec/cargo-audit/issues&quot;&gt;file a bug report&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We'd like to thank Reza Fatahi and Hanif Ariffin for their work in contributing this feature.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#warnings-for-yanked-crates&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;warnings-for-yanked-crates&quot;&gt;&lt;/a&gt;Warnings for yanked crates&lt;/h2&gt;
&lt;p&gt;As you can see in the screenshot above, &lt;code&gt;cargo audit&lt;/code&gt; now checks each of the crates in your &lt;code&gt;Cargo.lock&lt;/code&gt; file against the &lt;a href=&quot;https://crates.io&quot;&gt;crates.io&lt;/a&gt; index to determine if any of them have been yanked. If they have, it will emit a warning as per above.&lt;/p&gt;
&lt;p&gt;If you'd like for yanked crates to be a hard failure, you can run &lt;code&gt;cargo audit&lt;/code&gt; with the &lt;code&gt;-D&lt;/code&gt; command-line argument:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cargo audit -D
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or if you prefer to be more explicit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cargo audit --deny-warnings
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a href=&quot;#compatibility-with-the-new-v2&quot;-format-for-cargo.lock&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;compatibility-with-the-new-v2&quot;-format-for-cargo.lock&quot;&gt;&lt;/a&gt;Compatibility with the new &amp;quot;V2&amp;quot; format for &lt;code&gt;Cargo.lock&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Rust 1.39 shipped support for a new &lt;a href=&quot;https://github.com/rust-lang/cargo/pull/7070&quot;&gt;merge-friendly &lt;code&gt;Cargo.lock&lt;/code&gt; format&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cargo audit&lt;/code&gt; consumes &lt;code&gt;Cargo.lock&lt;/code&gt; directly, and while the V2 format change didn't break the core vulnerability-auditing functionality of &lt;code&gt;cargo audit&lt;/code&gt;, several minor features regressed because of this, such as displaying dependency trees for vulnerable dependencies.&lt;/p&gt;
&lt;p&gt;This release also upgrades to version 4.0 of the &lt;a href=&quot;https://github.com/RustSec/cargo-lock&quot;&gt;&lt;code&gt;cargo-lock&lt;/code&gt; crate&lt;/a&gt;, which includes full support for the V2 &lt;code&gt;Cargo.lock&lt;/code&gt; format and constructs a representation of a lockfile which is the same across the V1 and V2 formats.&lt;/p&gt;
&lt;p&gt;If you noticed dependency trees failing to display after upgrading to the V2 &lt;code&gt;Cargo.lock&lt;/code&gt; format, they should now be working again!&lt;/p&gt;
&lt;p&gt;Thanks for reading, and we hope you enjoy &lt;code&gt;cargo-audit&lt;/code&gt; 0.11!&lt;/p&gt;
</content>

        <author>
            <name>Tony Arcieri</name>
        </author>
    </entry>
    
    <entry>
        <title>Governance Working Group Update: Meeting 14 January 2020</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/01/14/Goverance-wg-cfp.html" type="text/html" title="Governance Working Group Update: Meeting 14 January 2020" />
        <published>2020-01-14T00:00:00Z</published>
        <updated>2020-01-14T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/01/14/Goverance-wg-cfp.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/01/14/Goverance-wg-cfp.html">&lt;p&gt;Hello everyone!&lt;/p&gt;
&lt;p&gt;On Tuesday 14 January the working group met and discussed the RFC
https://github.com/rust-lang/wg-governance/blob/project-wg-rfc-next/draft-rfcs/working-group-terminology.md.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#project-groups&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;project-groups&quot;&gt;&lt;/a&gt;Project groups&lt;/h2&gt;
&lt;p&gt;You can see the &lt;a href=&quot;https://github.com/rust-lang/wg-governance/blob/master/minutes/2020.01.14.md&quot;&gt;detailed minutes&lt;/a&gt; on the &lt;a href=&quot;https://github.com/rust-lang/wg-governance/&quot;&gt;wg-governance&lt;/a&gt; repository, but here is a quick summary:&lt;/p&gt;
&lt;p&gt;*Decision for specifics of working group creation is to remain with what was described in https://internals.rust-lang.org/t/enabling-the-formation-of-new-working-groups/10218
*Group status will be Active or Archived
*Future work will be done to lighten the RFC process (an issue has been submitted)
*A project group lifecycle chart was created and a flowchart based on this will be integrated in the RFC&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#next-meeting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;next-meeting&quot;&gt;&lt;/a&gt;Next meeting&lt;/h2&gt;
&lt;p&gt;Our next meeting will be 28 January 2020. We will discuss the status of the project groups RFC for no more than 15 minutes,
and then focus on reviewing action items from the meeting of December 3rd.&lt;/p&gt;
</content>

        <author>
            <name>Val Grimm</name>
        </author>
    </entry>
    
    <entry>
        <title>Lang Team Design Meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/01/10/lang-team-design-meetings.html" type="text/html" title="Lang Team Design Meetings" />
        <published>2020-01-10T00:00:00Z</published>
        <updated>2020-01-10T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/01/10/lang-team-design-meetings.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/01/10/lang-team-design-meetings.html">&lt;p&gt;Hi all! I wanted to give a quick update about the lang team. We're
starting something new this year: a regular &lt;strong&gt;design meeting&lt;/strong&gt;.  The
idea of the design meeting is that it's a time for us to have in-depth
discussions on some particular topic. This might be a burning problem
that we've discovered, an update on some existing design work, or a
forward looking proposal.&lt;/p&gt;
&lt;p&gt;The meetings will be scheduled in advance. Ideally, each meeting
should also have a blog post before-hand giving background material,
although that may be difficult to achieve in practice. Similarly,
after each meeting, we'll typically post minutes and a recording, and
ideally try to write up a summary blog post with major
points. (Sometimes recordings are hard to achieve, either for
technical reasons or because we wanted the ability to discuss more
sensitive topics.)&lt;/p&gt;
&lt;p&gt;The meetings are open for anyone to listen in and attend. They
generally take place on Mondays at &amp;quot;noon Boston time&amp;quot; -- but for the
precise scheduling you should check the &lt;a href=&quot;https://github.com/rust-lang/lang-team/#meeting-calendar&quot;&gt;lang team calendar&lt;/a&gt;. We'll
try to keep the calendar up to date with the topic to be discussed in
each meeting, as well.  Meetings might not happen every week, if we
don't have a topic in mind.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#first-design-meeting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;first-design-meeting&quot;&gt;&lt;/a&gt;First design meeting&lt;/h2&gt;
&lt;p&gt;Our first design meeting was actually last Monday! We discussed the
soundness hole that was found some time ago in &lt;code&gt;Pin&lt;/code&gt;.  You can read
the &lt;a href=&quot;https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2020-01-06-Pin-unsoundness.md&quot;&gt;minutes&lt;/a&gt; from our discussion and a &lt;a href=&quot;https://youtu.be/MX_GRNLhlY8&quot;&gt;recording&lt;/a&gt; is also
available. You might also find it easier to read the &lt;a href=&quot;https://internals.rust-lang.org/t/unsoundness-in-pin/11311/112?u=nikomatsakis&quot;&gt;comments in the
internals thread&lt;/a&gt;. The good news is that we seem to be
centralizing on a &lt;a href=&quot;https://internals.rust-lang.org/t/explicit-negative-impls-to-fix-pin-soundness-hole/11587&quot;&gt;solution based on negative impls&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#next-design-meeting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;next-design-meeting&quot;&gt;&lt;/a&gt;Next design meeting&lt;/h2&gt;
&lt;p&gt;The next design meeting will take place this coming Monday. The topic
will be how to fix &lt;a href=&quot;https://github.com/rust-lang/rust/issues/57893&quot;&gt;rust-lang/rust#57893&lt;/a&gt;, which is a soundness bug
related to &lt;code&gt;dyn&lt;/code&gt; types. There is a &lt;a href=&quot;https://gist.github.com/0cf84ac05ce7751b5759cbf335c4d327&quot;&gt;prepared writeup describing the
problem and a possible solution&lt;/a&gt; to guide the meeting. It is
maybe worth noting that one of the proposed solutions involved a Rust
2021 edition as well (although there are smaller, more targeted fixes
that do not require a new edition).&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#design-meetings-after-that&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;design-meetings-after-that&quot;&gt;&lt;/a&gt;Design meetings after that&lt;/h2&gt;
&lt;p&gt;The next two weeks are likely to not have design meetings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;January 20th is Martin Luther King, Jr. day in the US.&lt;/li&gt;
&lt;li&gt;January 27th is the Mozilla All Hands.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a result, in both cases, many of the lang team members will be
unable to attend.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>Cargo in 2020</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/01/10/cargo-in-2020.html" type="text/html" title="Cargo in 2020" />
        <published>2020-01-10T00:00:00Z</published>
        <updated>2020-01-10T00:00:01Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/01/10/cargo-in-2020.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/01/10/cargo-in-2020.html">&lt;p&gt;This post is an overview of the major projects the Cargo team is interested in
tackling in 2020.&lt;/p&gt;
&lt;p&gt;It can be difficult to plan and predict around a volunteer-based open-source
project with limited resources. Instead of trying to present a wish list,
these are projects that already have a solid effort planned to push them
forward. That doesn't mean that we are not interested in other projects. We
have compiled a more detailed wish list at
&lt;a href=&quot;https://github.com/rust-lang/cargo/projects/1&quot;&gt;https://github.com/rust-lang/cargo/projects/1&lt;/a&gt; that gives an outline of
things we would like to see, but are unlikely to have significant progress
this year.&lt;/p&gt;
&lt;p&gt;If you are interested in helping, please let us know! We may not have time to
shepherd additional projects, but we may have time to give some amount of
feedback and review, particularly for well-motivated people who can do the
legwork of design and gathering a consensus.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#features&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;features&quot;&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section&quot;&gt;Features&lt;/a&gt; provide a way to express optional dependencies and conditional
compilation of code. Fixes and enhancements to Features are one of the
most requested things we hear. In the beginning of 2020, we plan to implement
a new feature resolver which will make it easier to make progress on
implementing and experimenting with new behavior. There is a wide variety of
different enhancements that we are looking at, which we hope to make
incremental progress on while retaining a full picture of the long-term
plan.&lt;/p&gt;
&lt;p&gt;Initially we plan to address the issues of decoupling shared dependencies
built with different features. Currently, features are unified for all uses of
a dependency, even when it is not necessary. This causes problems when a
feature intended for one context is incompatible with another. This often
happens for packages which have conditional &lt;code&gt;no_std&lt;/code&gt; support. This appears
with build-dependencies, dev-dependencies, target-specific dependencies, and
large workspaces, each of which have their unique challenges.&lt;/p&gt;
&lt;p&gt;Beyond that, the following is a brief view of the other major enhancements we
are tracking for the future:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Workspace feature selection and unification&lt;/li&gt;
&lt;li&gt;Automatic features&lt;/li&gt;
&lt;li&gt;Namespaced features&lt;/li&gt;
&lt;li&gt;Mutually exclusive features&lt;/li&gt;
&lt;li&gt;Private/unstable features&lt;/li&gt;
&lt;li&gt;Profile and target default features&lt;/li&gt;
&lt;li&gt;And working through some of the 50+ feature issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are some significant challenges around retaining backwards
compatibility, and being sensitive to increased build times. We hope that we
can address some of the major pain points while balancing those concerns.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#std-aware-cargo&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;std-aware-cargo&quot;&gt;&lt;/a&gt;std aware Cargo&lt;/h2&gt;
&lt;p&gt;The &amp;quot;std aware Cargo&amp;quot; project is to make Cargo aware of the Rust standard
library, and to build it from source instead of using the pre-built binaries
that ship with &lt;code&gt;rustc&lt;/code&gt;. Some of the notable benefits are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Customizing the compile-time flags of the standard library, such as using
different optimizations, target-cpu, debug settings, etc.&lt;/li&gt;
&lt;li&gt;Supporting cross-compiling to new targets which do not have official
distributions.&lt;/li&gt;
&lt;li&gt;Paving the road for future enhancements, such as compiling with different
features, and using custom sources.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A significant amount of work has already been finished in 2019 with the
&lt;a href=&quot;https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std&quot;&gt;&lt;code&gt;-Zbuild-std&lt;/code&gt;&lt;/a&gt; feature available on the nightly channel. There is still a
long road to bring it to a state where it can be stabilized. Work is being
tracked in the &lt;a href=&quot;https://github.com/rust-lang/wg-cargo-std-aware/&quot;&gt;&lt;code&gt;wg-cargo-std-aware&lt;/code&gt; repo&lt;/a&gt;, and anyone interested is
encouraged to leave feedback on the issue tracker.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#profiles&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;profiles&quot;&gt;&lt;/a&gt;Profiles&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://doc.rust-lang.org/nightly/cargo/reference/profiles.html&quot;&gt;Profiles&lt;/a&gt; have received a significant amount of work in 2018 and 2019.
&lt;a href=&quot;https://doc.rust-lang.org/nightly/cargo/reference/profiles.html#overrides&quot;&gt;Overrides&lt;/a&gt; are now stable (shipping in Rust 1.41). &lt;a href=&quot;https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#custom-named-profiles&quot;&gt;Custom named profiles&lt;/a&gt;
are available on the nightly channel. In 2020 we hope to continue pushing
these enhancements forward. Some of the efforts we are working towards are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stabilizing &lt;a href=&quot;https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#config-profiles&quot;&gt;config-based profiles&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Stabilizing &lt;a href=&quot;https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#custom-named-profiles&quot;&gt;custom-named profiles&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Implementing the &lt;code&gt;build&lt;/code&gt; profile which can make it easier to define build-script settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#ongoing-projects&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;ongoing-projects&quot;&gt;&lt;/a&gt;Ongoing projects&lt;/h2&gt;
&lt;p&gt;Some ongoing efforts don't have an end, and we intend to continue making
progress with them. Several new chapters have been added to the documentation,
and there is more to come. The JSON APIs are continually expanding with new
information making it easier to integrate tools and extract information. And
of course, trying to stay on top of bugs and issues!&lt;/p&gt;
</content>

        <author>
            <name>Eric Huss</name>
        </author>
    </entry>
    
    <entry>
        <title>Formatting the compiler tree</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2019/12/23/formatting-the-compiler.html" type="text/html" title="Formatting the compiler tree" />
        <published>2019-12-23T00:00:00Z</published>
        <updated>2019-12-23T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2019/12/23/formatting-the-compiler.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2019/12/23/formatting-the-compiler.html">&lt;h2&gt;&lt;a href=&quot;#what-happened&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;what-happened&quot;&gt;&lt;/a&gt;What happened&lt;/h2&gt;
&lt;p&gt;We recently landed two PRs which together reformatted essentially all code in the compiler tree.&lt;/p&gt;
&lt;p&gt;The first one, &lt;a href=&quot;https://github.com/rust-lang/rust/pull/65939&quot;&gt;#65939&lt;/a&gt;, contained the initial formatting infrastructure. We currently use &lt;code&gt;rustfmt&lt;/code&gt;
directly, pinned to a version specified in &lt;code&gt;src/stage0.txt&lt;/code&gt;. We expect to update it as needed, and
otherwise once per cycle (coinciding with the bootstrap bump, most likely).&lt;/p&gt;
&lt;p&gt;The second one which reformatted the majority of the codebase is &lt;a href=&quot;https://github.com/rust-lang/rust/pull/67540&quot;&gt;#67540&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This change landed with the following rustfmt config. Note that this configuration is subject
to change (in particular, merge_derives may be removed in the future), but should be fairly stable.
Your editor should automatically pick this configuration up inside the rust-lang/rust repository (it
is located in the &lt;code&gt;rustfmt.toml&lt;/code&gt; file in the root).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version = &amp;quot;Two&amp;quot;
use_small_heuristics = &amp;quot;Max&amp;quot;
merge_derives = false
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a href=&quot;#how-to-use-formatting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;how-to-use-formatting&quot;&gt;&lt;/a&gt;How to use formatting&lt;/h2&gt;
&lt;p&gt;You can reformat the repository with &lt;code&gt;x.py fmt&lt;/code&gt; and &lt;code&gt;x.py fmt --check&lt;/code&gt; to verify formatting; these
commands are unfortunately somewhat slow today. Tidy will also currently run the latter of these two
checks (&lt;code&gt;x.py fmt --check&lt;/code&gt;) internally, but this may change in the future if we can't improve the
speed of formatting the entire codebase.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#resolving-conflicts&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;resolving-conflicts&quot;&gt;&lt;/a&gt;Resolving conflicts&lt;/h2&gt;
&lt;p&gt;If you have an ongoing branch, you're likely to have merge conflicts. The following should help you
resolve them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/bin/bash

set -xeo pipefail

if [ &amp;quot;$1&amp;quot; = &amp;quot;from-rebase&amp;quot; ] ; then
	git rev-parse HEAD &amp;gt; /tmp/commit
	git rev-parse HEAD &amp;gt;&amp;gt; /tmp/old.shas
	./x.py fmt
	git commit -a --amend --no-edit
	git rev-parse HEAD &amp;gt;&amp;gt; /tmp/new.shas
	git reset --hard $(cat /tmp/commit)
else
	rm -f /tmp/old.shas /tmp/commit /tmp/new.shas
	git rebase 8eb7c58dbb7 --exec '../format.sh from-rebase'
	branch=$(git rev-parse --abbrev-ref HEAD) # get branch name
	git reset --hard 8eb7c58dbb7
	for sha in $(cat /tmp/new.shas); do
		git cherry-pick $sha -Xtheirs
	done
  # put yourself atop the format the world PR
  git rebase -Xtheirs a916ac22b9f7f1f0f7aba0a41a789b3ecd765018
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This script should be saved to &lt;code&gt;format.sh&lt;/code&gt; in the parent directory of your Rust
checkout, and then run &lt;code&gt;git fetch upstream &amp;amp;&amp;amp; ../format.sh&lt;/code&gt;. &lt;code&gt;upstream&lt;/code&gt; should
be the name of the rust-lang/rust remote.&lt;/p&gt;
&lt;p&gt;Once the script runs, you will be based on the &lt;code&gt;a916ac22b9f7f&lt;/code&gt; commit. You
likely want to then run &lt;code&gt;git rebase -i upstream/master&lt;/code&gt; or so to finish, but the
script above gets you past the formatting PR at least.&lt;/p&gt;
&lt;p&gt;This should mostly resolve conflicts correctly, but occasionally if you've edited something in
imports (a common case I've encountered) or otherwise this will not resolve quite right. Usually
though this will solve 99% of the problems and the rest can be fixed up manually afterwards.&lt;/p&gt;
</content>

        <author>
            <name>Mark Rousskov</name>
        </author>
    </entry>
    
    <entry>
        <title>Governance Working Group Update: Meeting 17 December 2019</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2019/12/20/governance-wg-meeting.html" type="text/html" title="Governance Working Group Update: Meeting 17 December 2019" />
        <published>2019-12-20T00:00:00Z</published>
        <updated>2019-12-20T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2019/12/20/governance-wg-meeting.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2019/12/20/governance-wg-meeting.html">&lt;p&gt;Hello everyone!&lt;/p&gt;
&lt;p&gt;On Tuesday 17 December the working group met and built an outline of an RFC to introduce project groups. If you would like to watch, a recording is available on &lt;a href=&quot;https://www.youtube.com/watch?v=q6us8yhDDUU&amp;feature=youtu.be&quot;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#project-groups&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;project-groups&quot;&gt;&lt;/a&gt;Project groups&lt;/h2&gt;
&lt;p&gt;You can see the &lt;a href=&quot;https://github.com/rust-lang/wg-governance/blob/master/minutes/2019.12.17.md&quot;&gt;detailed minutes&lt;/a&gt; on the &lt;a href=&quot;https://github.com/rust-lang/wg-governance/&quot;&gt;wg-governance&lt;/a&gt; repository, but here is a quick summary of what we would like to do with the RFC:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduce the project group concept, creation workflow, and lifecycle&lt;/li&gt;
&lt;li&gt;Provide guidance for how project groups use RFCs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Goals served by introducing project groups include improved visibility into and follow-through on projects,
as well as supporting better documentation of the design process.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#next-meeting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;next-meeting&quot;&gt;&lt;/a&gt;Next meeting&lt;/h2&gt;
&lt;p&gt;Our next meeting will be Jan 14. The topic is to be determined, but it is planned to discuss that on January 7th on the Rust Discord in the &lt;code&gt;#wg-governance&lt;/code&gt; channel.&lt;/p&gt;
</content>

        <author>
            <name>Val Grimm</name>
        </author>
    </entry>
    
    <entry>
        <title>An Update from WG-Learning</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2019/12/20/wg-learning-update.html" type="text/html" title="An Update from WG-Learning" />
        <published>2019-12-20T00:00:00Z</published>
        <updated>2019-12-20T00:00:01Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2019/12/20/wg-learning-update.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2019/12/20/wg-learning-update.html">&lt;h1&gt;&lt;a href=&quot;#an-update-from-wg-learning&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;an-update-from-wg-learning&quot;&gt;&lt;/a&gt;An update from WG-Learning&lt;/h1&gt;
&lt;p&gt;In our last post in &lt;a href=&quot;https://blog.rust-lang.org/inside-rust/2019/10/28/rustc-learning-working-group-introduction.html&quot;&gt;October&lt;/a&gt; we gave an overview what the Learning WG is
and what we are doing. We have made a lot of progress since that post, and we
have also held a meeting to decide what to work on next. So let's dig in...&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#work-completed&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;work-completed&quot;&gt;&lt;/a&gt;Work completed&lt;/h2&gt;
&lt;p&gt;We mentioned before that we are in the process of producing &lt;a href=&quot;https://rust-lang.github.io/rustc-guide/&quot;&gt;rustc-guide&lt;/a&gt;
chapters from the &amp;quot;Compiler Lecture Series&amp;quot; videos. The goal is to try to
produce guide chapters that are approachable for beginners and give a good
foundation for exploring and hacking on the compiler.&lt;/p&gt;
&lt;p&gt;Recently, we merge a &lt;a href=&quot;https://rust-lang.github.io/rustc-guide/salsa.html&quot;&gt;chapter&lt;/a&gt; on &lt;a href=&quot;https://crates.io/crates/salsa&quot;&gt;&lt;code&gt;salsa&lt;/code&gt;&lt;/a&gt; by &lt;code&gt;@Karrq&lt;/code&gt;.
&lt;code&gt;salsa&lt;/code&gt; is a crate that makes incremental computation easier. While it is not
used in &lt;code&gt;rustc&lt;/code&gt; itself, it is heavily inspired by it, and it is used by
&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer&quot;&gt;&lt;code&gt;rust-analyzer&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We also collectively have been working on a chapter about &lt;a href=&quot;https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/type.Ty.html&quot;&gt;&lt;code&gt;ty::Ty&lt;/code&gt;&lt;/a&gt; and
the way that rustc represents types internally. You can find that PR
&lt;a href=&quot;https://github.com/rust-lang/rustc-guide/pull/530&quot;&gt;here&lt;/a&gt;. This has been a big effort for a few months now, and we are excited
to have this new chapter in the guide.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#whats-next?&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;whats-next?&quot;&gt;&lt;/a&gt;What's next?&lt;/h2&gt;
&lt;p&gt;We just had a &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/196385-t-compiler.2Fwg-learning/topic/planning.20meeting&quot;&gt;planning meeting&lt;/a&gt; to discuss what to work on next. The
guide has some long-standing holes and shortcomings that we would like to address.&lt;/p&gt;
&lt;p&gt;Specifically, the Learning WG decided that we wanted to pursue the following goals next:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write an overview chapter&lt;/li&gt;
&lt;li&gt;Gather source material for chapters on monomorphization and LLVM&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#overview-chapter&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;overview-chapter&quot;&gt;&lt;/a&gt;Overview chapter&lt;/h3&gt;
&lt;p&gt;One of the challenges with big software systems is understanding how everything
fits together. We have seen this problem come up with the rustc-guide; the chapters
tunnel down into a single part of the compiler, but it is hard to get a good
view of all the things that happen to a piece of code between lexing and linking.&lt;/p&gt;
&lt;p&gt;We want to remedy this problem by creating an Overview chapter that walks
through some example from the beginning of the compiler to the end of the
compiler at a high level.  We plan to put this chapter at the beginning of
(part 2 of) the guide, so that it guide readers as to what part of the
compilation they are reading about in the subsequent chapters.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#monomorphization-codegen,-llvm&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;monomorphization-codegen,-llvm&quot;&gt;&lt;/a&gt;Monomorphization, Codegen, LLVM&lt;/h3&gt;
&lt;p&gt;One of the biggest gaps in the guide currently is what happens to your code
after the MIR is produced. We have chapters on almost everything that happens
before that (though many of them are pretty slim), but we have almost nothing
after the MIR is produced, borrow checked, and optimized.&lt;/p&gt;
&lt;p&gt;In particular, after the MIR is optimized, we need to &lt;a href=&quot;https://rust-lang.github.io/rustc-guide/appendix/glossary.html&quot;&gt;monomorphize&lt;/a&gt; it,
produce LLVM IR from it, call LLVM to produce executable code, and then link
everything to form a final binary object.&lt;/p&gt;
&lt;p&gt;The Learning WG will work on collecting information to write chapters on these
topics.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#getting-involved&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;getting-involved&quot;&gt;&lt;/a&gt;Getting involved&lt;/h2&gt;
&lt;p&gt;Did any of this sound interesting to you? We would love for you to join us! You
can the Learning WG on the &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/196385-t-compiler.2Fwg-learning&quot;&gt;&lt;code&gt;t-compiler/wg-learning&lt;/code&gt;&lt;/a&gt; stream on Zulip.
Feel free to stop by and ping us.&lt;/p&gt;
</content>

        <author>
            <name>mark-i-m</name>
        </author>
    </entry>
    
    <entry>
        <title>2019-12-17 Infrastructure Team Meeting</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2019/12/20/infra-team-meeting.html" type="text/html" title="2019-12-17 Infrastructure Team Meeting" />
        <published>2019-12-20T00:00:00Z</published>
        <updated>2019-12-20T00:00:02Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2019/12/20/infra-team-meeting.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2019/12/20/infra-team-meeting.html">&lt;p&gt;Meeting run by pietroalbini. Minutes written by pietroalbini.&lt;br /&gt;
Attending: aidanhs, alexcrichton, kennytm, Mark-Simulacrum, pietroalbini,
shepmaster&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#spurious-chocolatey-failures&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;spurious-chocolatey-failures&quot;&gt;&lt;/a&gt;Spurious Chocolatey failures&lt;/h2&gt;
&lt;p&gt;Since a few days ago, Chocolatey started returning 503 error codes at random,
preventing some Windows CI runners from downloading MSYS2, and the tree was
closed to prevent the failures from affecting a bunch of PRs. There were a few
proposals on how to work around them, spanning from a proper mirroring
implementation to just a quick fix to get CI working again.&lt;/p&gt;
&lt;p&gt;After the discussion the team agreed to prioritize getting CI working
consistently rather than implement the correct solution from the start. aidanhs
is going to look into that during the weekend, if nobody else finishes the work
before.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#progress-on-moving-the-infrastructure-to-terraform&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;progress-on-moving-the-infrastructure-to-terraform&quot;&gt;&lt;/a&gt;Progress on moving the infrastructure to Terraform&lt;/h2&gt;
&lt;p&gt;In the past few months pietroalbini started exploring moving the configuration
of Rust’s AWS infrastructure to Terraform, to allow for better collaboration
and auditability. So far a few services have been moved over to Terraform, and
pietroalbini proposed in the meeting to evaluate moving dynamic applications
over to ECS and configure those with Terraform.&lt;/p&gt;
&lt;p&gt;alexcrichton brought up the point that pietroalbini is at the moment the only
person in the team familiar with our Terraform setup, and while it’s probably a
better solution than the status quo we need more people able to work with it
before we decide to fully commit to using it. He acknowledged the current
solution (services manually configured through the console) is not scalable nor
long term, but we can’t jump to Terraform if most of the team doesn’t know how
to work with it.&lt;/p&gt;
&lt;p&gt;shepmaster said that this is not much different than the situation in the past,
where alexcrichton was the only one knowing how our infrastructure worked
(since then other people in the team got up to speed). aidanhs pointed out that
we had a case in the past like that, when only alexcrichton knew how a system
worked and it broke while he was on holiday.&lt;/p&gt;
&lt;p&gt;alexcrichton proposed to pause investing time into Terraform until at least
another team member gets familiar with it, and Mark-Simulacrum said he’s
willing to pair with pietroalbini for a few hours to migrate one of the
services to Terraform, learning how it works in the process.&lt;/p&gt;
&lt;p&gt;The feelings about ECS turned up to be mostly the same: everyone agreed it’s
surely a better solution than the setup we have right now, but only
pietroalbini is familiar with it. We agreed that pietroalbini and
Mark-Simulacrum are going to deploy one of the small applications to ECS using
Terraform while pairing, testing both the new things in one go.&lt;/p&gt;
&lt;p&gt;In the end, pietroalbini reminded the team that not every application we
currently host is going to fit into ECS + Fargate without changes, especially
because you can’t really persist data on the filesystem with it, but he
mentioned he’s willing to do the implementation work to adapt those
applications not to use the filesystem anymore.&lt;/p&gt;
</content>

        <author>
            <name>Pietro Albini</name>
        </author>
    </entry>
    
</feed>
