<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/inside-rust/" version="0.1.0">Inside Rust Blog</generator>
    <link href="https://blog.rust-lang.org/inside-rust/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/inside-rust/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/inside-rust/</id>
    <title>Inside Rust Blog</title>
    <subtitle>Want to follow along with Rust development? Curious how you might get involved? Take a look!</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2020-02-20T14:26:27Z</updated>

    
    <entry>
        <title>Please welcome jtgeibel as crates.io team co-lead!</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/02/20/jtgeibel-crates-io-co-lead.html" type="text/html" title="Please welcome jtgeibel as crates.io team co-lead!" />
        <published>2020-02-20T00:00:00Z</published>
        <updated>2020-02-20T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/02/20/jtgeibel-crates-io-co-lead.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/02/20/jtgeibel-crates-io-co-lead.html">&lt;p&gt;I'm happy to announce some changes in the leadership of the crates.io
team. Justin Geibel (&lt;a href=&quot;https://github.com/jtgeibel&quot;&gt;jtgeibel&lt;/a&gt;) will be joining me as co-lead. Justin
will be replacing Ashley Williams, who has been very busy lately with
other commitments.&lt;/p&gt;
&lt;p&gt;Justin has been involved in the crates.io team since the summer
of 2017. In addition to general &amp;quot;gardening&amp;quot; tasks (Justin has &lt;a href=&quot;https://github.com/rust-lang/crates.io/pulls/jtgeibel&quot;&gt;over
140 PRs&lt;/a&gt; to the
crates.io repo!), he has made a number of improvements and changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Refactoring of error handling logic and the test harness&lt;/li&gt;
&lt;li&gt;CI improvements to caching behavior and build times&lt;/li&gt;
&lt;li&gt;Added a boot time option to use hyper as the web server, with the goal of eventually switching over in production&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please join me in extending a sincere congratulations üéâ to Justin, as
well as a big thank you ‚ù§Ô∏è to Ashley for all of the work she did
as co-lead of the team thus far.&lt;/p&gt;
</content>

        <author>
            <name>Sean Griffin</name>
        </author>
    </entry>
    
    <entry>
        <title>Upcoming compiler-team design meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/02/14/upcoming-compiler-team-design-meetings.html" type="text/html" title="Upcoming compiler-team design meetings" />
        <published>2020-02-14T00:00:00Z</published>
        <updated>2020-02-14T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/02/14/upcoming-compiler-team-design-meetings.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/02/14/upcoming-compiler-team-design-meetings.html">&lt;p&gt;In our &lt;a href=&quot;https://zulip-archive.rust-lang.org/131828tcompiler/33384planningmeeting20200214.html&quot;&gt;planning meeting on February 14th&lt;/a&gt;, the &lt;a href=&quot;https://www.rust-lang.org/governance/teams/compiler&quot;&gt;compiler team&lt;/a&gt; has scheduled our
next batch of upcoming design meetings. You can find the exact times
on the compiler team's &lt;a href=&quot;https://rust-lang.github.io/compiler-team/#meeting-calendar&quot;&gt;meeting calendar&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On Feb 28th (&lt;a href=&quot;https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=NXY1bWhwYm1tMzRydDNwaWc5dmJjdGNiM3QgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com&quot;&gt;calendar event&lt;/a&gt;, we will discuss our triage
procedures and how we can make them more efficient. See
&lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/247&quot;&gt;rust-lang/compiler-team#247&lt;/a&gt; for more details.&lt;/li&gt;
&lt;li&gt;On Mar 6th (&lt;a href=&quot;https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=MXBkOXZtcWxyaTk4bHFpN202bTE5bTg0OWsgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com&quot;&gt;calendar event&lt;/a&gt;), we will discuss plans to extract
rustc's representation of types and trait solving into a standalone
library. See &lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/234&quot;&gt;rust-lang/compiler-team#234&lt;/a&gt; for more details.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#did-you-know&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;did-you-know&quot;&gt;&lt;/a&gt;Did you know?&lt;/h3&gt;
&lt;p&gt;Most weeks, the compiler team has some sort of design meeting. These
meetings take place on Zulip and are open to all. Every 4 weeks, we do
a planning meeting to pick the next few meetings from the list of open
proposals. You can find &lt;a href=&quot;https://rust-lang.github.io/compiler-team/about/steering-meeting/&quot;&gt;more details about how the compiler-team
steering meeting process here&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>Governance Working Group Update: Meeting 11 February 2020</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/02/11/Goverance-wg.html" type="text/html" title="Governance Working Group Update: Meeting 11 February 2020" />
        <published>2020-02-11T00:00:00Z</published>
        <updated>2020-02-11T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/02/11/Goverance-wg.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/02/11/Goverance-wg.html">&lt;p&gt;Hello everyone!&lt;/p&gt;
&lt;p&gt;The governance working group meeting of January 28th was canceled due to the Mozilla All Hands that week.
Therefore, working group next convened on 11 February.
The following meeting will take place on 27 February.&lt;/p&gt;
&lt;p&gt;The agenda included&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Discuss project groups description RFC
https://github.com/rust-lang/rfcs/pull/2856
Decision: Determine if inactive members in scope; if not in scope, confirm RFC.&lt;/li&gt;
&lt;li&gt;Review action items from meeting of December 3 2019
https://github.com/rust-lang/wg-governance/blob/master/minutes/2019.12.03.md#action-items&lt;/li&gt;
&lt;li&gt;Confirm adjustment of timeslot based on Doodle sent out in Discord channel&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a href=&quot;#project-groups&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;project-groups&quot;&gt;&lt;/a&gt;Project groups&lt;/h2&gt;
&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/rust-lang/wg-governance/blob/master/minutes/2020.02.11.md&quot;&gt;detailed minutes&lt;/a&gt; on the &lt;a href=&quot;https://github.com/rust-lang/wg-governance/&quot;&gt;wg-governance&lt;/a&gt; repository, but here is a quick summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Project groups description RFC confirmed complete&lt;/li&gt;
&lt;li&gt;Next items taken from Dec 3 backlog are access policy (NellShamrell is working on this),
Discussion of where to discuss the pre-RFC process, and followup about moving (community, devtools, nursery) to rust-lang&lt;/li&gt;
&lt;li&gt;XAMPPRocky is already working on a compliance bot to simplify administration&lt;/li&gt;
&lt;li&gt;Timeslot adjusted to 19-20 CET / 1pm-2pm EST / 10-11am PST on Zulip as text chat, with the same biweekly cadence.
Zoom (video) meetings will be used as needed, e.g. if a big RFC needs to be pushed through.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#next-meeting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;next-meeting&quot;&gt;&lt;/a&gt;Next meeting&lt;/h2&gt;
&lt;p&gt;Our next meeting will be 27 February 2020 via Zulip 19-20 CET / 1pm-2pm EST / 10-11am PST.
Agenda is -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Access policy - Nell will have something to discuss&lt;/li&gt;
&lt;li&gt;Pre-RFC process - determine right place to talk about this&lt;/li&gt;
&lt;li&gt;Follow-up on moving (community, devtools, nursery) to rust-lang&lt;/li&gt;
&lt;/ol&gt;
</content>

        <author>
            <name>Val Grimm</name>
        </author>
    </entry>
    
    <entry>
        <title>2020-02-06 Compiler Team Triage Meeting</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/02/07/compiler-team-meeting.html" type="text/html" title="2020-02-06 Compiler Team Triage Meeting" />
        <published>2020-02-07T00:00:00Z</published>
        <updated>2020-02-07T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/02/07/compiler-team-meeting.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/02/07/compiler-team-meeting.html">&lt;p&gt;The compiler team had our weekly triage meeting on 2020-02-06.
You can find the &lt;a href=&quot;https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2020-02-06/&quot;&gt;minutes&lt;/a&gt; on the &lt;a href=&quot;https://github.com/rust-lang/compiler-team&quot;&gt;compiler-team repository&lt;/a&gt;.
Each week, we have general announcements from the team followed by check-ins from two of the compiler team working groups.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#announcements&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;announcements&quot;&gt;&lt;/a&gt;Announcements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There is a design meeting this Friday (2020-02-07) on &lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/237&quot;&gt;parser-librarification&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/davidtwco&quot;&gt;@davidtwco&lt;/a&gt; has made progress on the polymorphization effort and has posted a &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/progress.20updates/near/187461928&quot;&gt;status update&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/michaelwoerister&quot;&gt;@mw&lt;/a&gt; has posted a major change proposal to make &lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/245&quot;&gt;incremental compilation respect the &lt;code&gt;-Ccodegen-units&lt;/code&gt; setting&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cargo report future-incompat &lt;a href=&quot;https://github.com/rust-lang/rfcs/issues/2834&quot;&gt;rfc#2834&lt;/a&gt; is on track to get an FCP merge request from the cargo team in the near future.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#working-group-sync&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;working-group-sync&quot;&gt;&lt;/a&gt;Working group sync&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&quot;#wg-rls-20&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;wg-rls-20&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://rust-lang.github.io/compiler-team/working-groups/rls-2.0/&quot;&gt;wg-rls-2.0&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Chalk dependency has been updated which dramatically reduced crashes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cargo check&lt;/code&gt; handling has been moved ino the server so all editors not just VS Code benefit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matklad&quot;&gt;@matklad&lt;/a&gt; and &lt;a href=&quot;https://github.com/nikomatsakis&quot;&gt;@nikomatsakis&lt;/a&gt; have been working on an RFC to merge RLS and Rust Analyzer officially.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work is proceeding on &amp;quot;production readiness&amp;quot;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Binary releases are available on the project's GitHub page.&lt;/li&gt;
&lt;li&gt;Planning to publish to VS Code extension marketplace &amp;quot;soon&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#wg-self-profile&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;wg-self-profile&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://rust-lang.github.io/compiler-team/working-groups/self-profile/&quot;&gt;wg-self-profile&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/rust-lang/rust/issues/58967&quot;&gt;&amp;quot;Minimum Viable Product&amp;quot;&lt;/a&gt; has been completed!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Self-profling is enabled for all perf.rust-lang.org runs and we automatically publish the data. (&lt;a href=&quot;https://perf.rust-lang.org/detailed-query.html?commit=3761dcd3467441f78939ccb3b341b03b6a7558d7&amp;base_commit=ac2f3fa41ac5ae8425b959f955bb7433b7c57aea&amp;benchmark=await-call-tree-debug&amp;run_name=clean&quot;&gt;Example&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/michaelwoerister&quot;&gt;@mw&lt;/a&gt; implemented query-key recording so queries can now be attributed to individual query invocations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/rust-lang/measureme/tree/master/crox&quot;&gt;&lt;code&gt;crox&lt;/code&gt;&lt;/a&gt; utility, which generates Chromium profiler compatible trace data, can now generate profiles for entire Cargo invocations via the &lt;code&gt;--dir&lt;/code&gt; flag.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This allows inspecting various rustc processes and their individual threads on a common timeline with full query data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quite a few people have tried &lt;code&gt;-Zself-profile&lt;/code&gt; and have said they found it very useful!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Wesley Wiser</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing the Cleanup Crew ICE-breaker group</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/02/06/Cleanup-Crew-ICE-breakers.html" type="text/html" title="Announcing the Cleanup Crew ICE-breaker group" />
        <published>2020-02-06T00:00:00Z</published>
        <updated>2020-02-06T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/02/06/Cleanup-Crew-ICE-breakers.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/02/06/Cleanup-Crew-ICE-breakers.html">&lt;p&gt;Following Niko Matsakis' announcement of the &lt;a href=&quot;https://blog.rust-lang.org/inside-rust/2019/10/22/LLVM-ICE-breakers.html&quot;&gt;&lt;strong&gt;LLVM ICE-breaker
group&lt;/strong&gt;&lt;/a&gt;,
I'm pleased to announce the &lt;strong&gt;Cleanup Crew ICE-breaker group&lt;/strong&gt;. It
follows the same principle, if you know Rust and would like to
contribute to rustc -- but without knowing about the compiler or taking
on a large commitment -- then the Cleanup Crew ICE-breaker group might
well be for you!&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#what-is-the-cleanup-crew-ice-breaker-group&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;what-is-the-cleanup-crew-ice-breaker-group&quot;&gt;&lt;/a&gt;What is the Cleanup Crew ICE-breaker group?&lt;/h3&gt;
&lt;p&gt;The &amp;quot;Cleanup Crew&amp;quot; are focused on improving bug reports. Specifically,
the goal is to try to ensure that every bug report has all the
information that will be needed for someone to fix it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a minimal, standalone example that shows the problem&lt;/li&gt;
&lt;li&gt;links to duplicates or related bugs&lt;/li&gt;
&lt;li&gt;if the bug is a regression (something that used to work, but no
longer does), then a bisection to the PR or nightly that caused
the regression&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This kind of cleanup is invaluable in getting bugs fixed.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#who-should-join&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;who-should-join&quot;&gt;&lt;/a&gt;Who should join?&lt;/h3&gt;
&lt;p&gt;It can be done by anybody who knows Rust, without any particularly deep
knowledge of the compiler.  If you want to be part of it and be notified
about things to do, just &lt;a href=&quot;https://rust-lang.github.io/rustc-guide/ice-breaker/about.html#join&quot;&gt;add yourself to the list&lt;/a&gt;! When we come across a suitable
bug, we'll write a message that &lt;code&gt;@&lt;/code&gt;-mentions every Github user on that
team. If you have some time, maybe you can provide some useful
information.&lt;/p&gt;
&lt;p&gt;You can find more information about the group on it's &lt;a href=&quot;https://rust-lang.github.io/rustc-guide/ice-breaker/cleanup-crew.html&quot;&gt;rustc-guide
section&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Santiago Pastorino</name>
        </author>
    </entry>
    
    <entry>
        <title>Upcoming compiler-team design meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/01/24/upcoming-compiler-team-design-meetings.html" type="text/html" title="Upcoming compiler-team design meetings" />
        <published>2020-01-24T00:00:00Z</published>
        <updated>2020-01-24T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/01/24/upcoming-compiler-team-design-meetings.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/01/24/upcoming-compiler-team-design-meetings.html">&lt;p&gt;In our &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/planning.20meeting.202019.2E01.2E17&quot;&gt;planning meeting on January 17&lt;/a&gt;, the &lt;a href=&quot;https://www.rust-lang.org/governance/teams/compiler&quot;&gt;compiler team&lt;/a&gt; has scheduled our
next batch of upcoming design meetings. You can find the exact times
on the compiler team's &lt;a href=&quot;https://rust-lang.github.io/compiler-team/#meeting-calendar&quot;&gt;meeting calendar&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On Feb 7th (&lt;a href=&quot;https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=Mmk4NmZqaWVtcHVmZDRmanZob3ZrMXJ1N28gNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com&quot;&gt;calendar event&lt;/a&gt;), we will discuss
&lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/237&quot;&gt;rust-lang/compiler-team#237&lt;/a&gt;, which describes some potential ways
to extract a Rust parser that can be shared between rustc and
rust-analyzer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#did-you-know&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;did-you-know&quot;&gt;&lt;/a&gt;Did you know?&lt;/h3&gt;
&lt;p&gt;Most weeks, the compiler team has some sort of design meeting. These
meetings take place on Zulip and are open to all. Every 4 weeks, we do
a planning meeting to pick the next few meetings from the list of open
proposals. You can find &lt;a href=&quot;https://rust-lang.github.io/compiler-team/about/steering-meeting/&quot;&gt;more details about how the compiler-team
steering meeting process here&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>February Lang Team Design Meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/01/24/feb-lang-team-design-meetings.html" type="text/html" title="February Lang Team Design Meetings" />
        <published>2020-01-24T00:00:00Z</published>
        <updated>2020-01-24T00:00:01Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/01/24/feb-lang-team-design-meetings.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/01/24/feb-lang-team-design-meetings.html">&lt;p&gt;We've scheduled our &lt;strong&gt;language team design meetings&lt;/strong&gt; for February. The current plans are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;February 3rd -- we will do an overview of &lt;strong&gt;specialization&lt;/strong&gt;. We'll cover details from the RFC but in particular talk about the &lt;a href=&quot;http://aturon.github.io/tech/2018/04/05/sound-specialization/&quot;&gt;as-yet-unimplemented plans to make it sound&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;February 10th -- we will cover interactions between the &lt;code&gt;&amp;amp;T&lt;/code&gt; type and LLVM's dereferenceable attribute, such as &lt;a href=&quot;https://github.com/rust-lang/rust/issues/55005&quot;&gt;rust-lang/rust#55005&lt;/a&gt; and &lt;a href=&quot;https://github.com/japaric/volatile-register/issues/10&quot;&gt;problems modeling MMIO&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;February 17th -- no meeting, it is President's Day in the US and many of us are absent&lt;/li&gt;
&lt;li&gt;February 24th -- we will summarize discussions from &lt;a href=&quot;https://github.com/rust-lang/project-ffi-unwind&quot;&gt;the ffi-unwind project group&lt;/a&gt; about whether we should permit foreign exceptions to propagate across the &amp;quot;C&amp;quot; ABI boundary, or establish a separate ABI (e.g., &amp;quot;C unwind&amp;quot;) for such cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#about-the-language-team-design-meetings&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;about-the-language-team-design-meetings&quot;&gt;&lt;/a&gt;About the language team design meetings&lt;/h2&gt;
&lt;p&gt;The idea of the design meeting is that it's a time for us to have
in-depth discussions on some particular topic. This might be a burning
problem that we've discovered, an update on some existing design work,
or a forward looking proposal.&lt;/p&gt;
&lt;p&gt;The meetings are open for anyone to listen in and attend. They are
typically also recorded and posted online, along with minutes, after
the fact. They generally take place on Mondays at &amp;quot;noon Boston time&amp;quot;
-- but for the precise scheduling you should check the &lt;a href=&quot;https://github.com/rust-lang/lang-team/#meeting-calendar&quot;&gt;lang team
calendar&lt;/a&gt;. Scheduled meetings are subject to change and
cancelation. In that case, the calendar events will be updated.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>cargo-audit v0.11: Introducing the `fix` feature, yanked crate detection, and more</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/01/23/Introducing-cargo-audit-fix-and-more.html" type="text/html" title="cargo-audit v0.11: Introducing the `fix` feature, yanked crate detection, and more" />
        <published>2020-01-23T00:00:00Z</published>
        <updated>2020-01-23T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/01/23/Introducing-cargo-audit-fix-and-more.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/01/23/Introducing-cargo-audit-fix-and-more.html">&lt;p&gt;&lt;a href=&quot;https://github.com/rustsec/cargo-audit&quot;&gt;cargo-audit&lt;/a&gt; is a command-line utility which inspects &lt;code&gt;Cargo.lock&lt;/code&gt; files and compares them against the &lt;a href=&quot;https://rustsec.org&quot;&gt;RustSec Advisory Database&lt;/a&gt;, a community database of security vulnerabilities maintained by the &lt;a href=&quot;https://github.com/rust-secure-code/wg&quot;&gt;Rust Secure Code Working Group&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post describes the new features in the 0.11 release of &lt;code&gt;cargo-audit&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#cargo-audit-fix-automatically-update-vulnerable-dependencies&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;cargo-audit-fix-automatically-update-vulnerable-dependencies&quot;&gt;&lt;/a&gt;&lt;code&gt;cargo audit fix&lt;/code&gt;: automatically update vulnerable dependencies&lt;/h2&gt;
&lt;p&gt;One of our &lt;a href=&quot;https://github.com/RustSec/cargo-audit/issues/23&quot;&gt;most requested features&lt;/a&gt; (especially by fans of the similar &lt;a href=&quot;https://docs.npmjs.com/cli/audit&quot;&gt;&lt;code&gt;npm audit fix&lt;/code&gt;&lt;/a&gt; command), the &lt;a href=&quot;https://github.com/RustSec/cargo-audit#cargo-audit-fix-subcommand&quot;&gt;new &lt;code&gt;cargo audit fix&lt;/code&gt; subcommand&lt;/a&gt; will attempt to automatically update version requirements for vulnerable dependencies to non-vulnerable versions.&lt;/p&gt;
&lt;p&gt;Note that this is an experimental new feature which isn't enabled by default. To try it out, install &lt;code&gt;cargo-audit&lt;/code&gt; with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cargo install cargo-audit --features=fix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will perform the same audit process as &lt;code&gt;cargo audit&lt;/code&gt; initially, and then attempt to apply fixes to your &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/RustSec/cargo-audit/c857beb/img/screenshot-fix.png&quot; alt=&quot;cargo audit fix screenshot&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Under the hood, it uses &lt;a href=&quot;https://github.com/killercup/cargo-edit&quot;&gt;cargo-edit&lt;/a&gt; (as a library) to perform modifications to your &lt;code&gt;Cargo.toml&lt;/code&gt; file, using the fixed version requirements listed in the advisory to try to perform an automatic upgrade to a non-vulnerable version of a dependency for each advisory.&lt;/p&gt;
&lt;p&gt;Note once more that this is a &lt;em&gt;new, experimental feature&lt;/em&gt; and as such it's bound to have bugs. If you're worried, you can use &lt;code&gt;cargo audit fix --dry-run&lt;/code&gt; to perform a dry run only. And if you do encounter bugs, please &lt;a href=&quot;https://github.com/rustsec/cargo-audit/issues&quot;&gt;file a bug report&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We'd like to thank Reza Fatahi and Hanif Ariffin for their work in contributing this feature.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#warnings-for-yanked-crates&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;warnings-for-yanked-crates&quot;&gt;&lt;/a&gt;Warnings for yanked crates&lt;/h2&gt;
&lt;p&gt;As you can see in the screenshot above, &lt;code&gt;cargo audit&lt;/code&gt; now checks each of the crates in your &lt;code&gt;Cargo.lock&lt;/code&gt; file against the &lt;a href=&quot;https://crates.io&quot;&gt;crates.io&lt;/a&gt; index to determine if any of them have been yanked. If they have, it will emit a warning as per above.&lt;/p&gt;
&lt;p&gt;If you'd like for yanked crates to be a hard failure, you can run &lt;code&gt;cargo audit&lt;/code&gt; with the &lt;code&gt;-D&lt;/code&gt; command-line argument:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cargo audit -D
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or if you prefer to be more explicit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cargo audit --deny-warnings
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a href=&quot;#compatibility-with-the-new-v2&quot;-format-for-cargo.lock&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;compatibility-with-the-new-v2&quot;-format-for-cargo.lock&quot;&gt;&lt;/a&gt;Compatibility with the new &amp;quot;V2&amp;quot; format for &lt;code&gt;Cargo.lock&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Rust 1.39 shipped support for a new &lt;a href=&quot;https://github.com/rust-lang/cargo/pull/7070&quot;&gt;merge-friendly &lt;code&gt;Cargo.lock&lt;/code&gt; format&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cargo audit&lt;/code&gt; consumes &lt;code&gt;Cargo.lock&lt;/code&gt; directly, and while the V2 format change didn't break the core vulnerability-auditing functionality of &lt;code&gt;cargo audit&lt;/code&gt;, several minor features regressed because of this, such as displaying dependency trees for vulnerable dependencies.&lt;/p&gt;
&lt;p&gt;This release also upgrades to version 4.0 of the &lt;a href=&quot;https://github.com/RustSec/cargo-lock&quot;&gt;&lt;code&gt;cargo-lock&lt;/code&gt; crate&lt;/a&gt;, which includes full support for the V2 &lt;code&gt;Cargo.lock&lt;/code&gt; format and constructs a representation of a lockfile which is the same across the V1 and V2 formats.&lt;/p&gt;
&lt;p&gt;If you noticed dependency trees failing to display after upgrading to the V2 &lt;code&gt;Cargo.lock&lt;/code&gt; format, they should now be working again!&lt;/p&gt;
&lt;p&gt;Thanks for reading, and we hope you enjoy &lt;code&gt;cargo-audit&lt;/code&gt; 0.11!&lt;/p&gt;
</content>

        <author>
            <name>Tony Arcieri</name>
        </author>
    </entry>
    
    <entry>
        <title>Governance Working Group Update: Meeting 14 January 2020</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/01/14/Goverance-wg-cfp.html" type="text/html" title="Governance Working Group Update: Meeting 14 January 2020" />
        <published>2020-01-14T00:00:00Z</published>
        <updated>2020-01-14T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/01/14/Goverance-wg-cfp.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/01/14/Goverance-wg-cfp.html">&lt;p&gt;Hello everyone!&lt;/p&gt;
&lt;p&gt;On Tuesday 14 January the working group met and discussed the RFC
https://github.com/rust-lang/wg-governance/blob/project-wg-rfc-next/draft-rfcs/working-group-terminology.md.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#project-groups&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;project-groups&quot;&gt;&lt;/a&gt;Project groups&lt;/h2&gt;
&lt;p&gt;You can see the &lt;a href=&quot;https://github.com/rust-lang/wg-governance/blob/master/minutes/2020.01.14.md&quot;&gt;detailed minutes&lt;/a&gt; on the &lt;a href=&quot;https://github.com/rust-lang/wg-governance/&quot;&gt;wg-governance&lt;/a&gt; repository, but here is a quick summary:&lt;/p&gt;
&lt;p&gt;*Decision for specifics of working group creation is to remain with what was described in https://internals.rust-lang.org/t/enabling-the-formation-of-new-working-groups/10218
*Group status will be Active or Archived
*Future work will be done to lighten the RFC process (an issue has been submitted)
*A project group lifecycle chart was created and a flowchart based on this will be integrated in the RFC&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#next-meeting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;next-meeting&quot;&gt;&lt;/a&gt;Next meeting&lt;/h2&gt;
&lt;p&gt;Our next meeting will be 28 January 2020. We will discuss the status of the project groups RFC for no more than 15 minutes,
and then focus on reviewing action items from the meeting of December 3rd.&lt;/p&gt;
</content>

        <author>
            <name>Val Grimm</name>
        </author>
    </entry>
    
    <entry>
        <title>Lang Team Design Meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/01/10/lang-team-design-meetings.html" type="text/html" title="Lang Team Design Meetings" />
        <published>2020-01-10T00:00:00Z</published>
        <updated>2020-01-10T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/01/10/lang-team-design-meetings.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/01/10/lang-team-design-meetings.html">&lt;p&gt;Hi all! I wanted to give a quick update about the lang team. We're
starting something new this year: a regular &lt;strong&gt;design meeting&lt;/strong&gt;.  The
idea of the design meeting is that it's a time for us to have in-depth
discussions on some particular topic. This might be a burning problem
that we've discovered, an update on some existing design work, or a
forward looking proposal.&lt;/p&gt;
&lt;p&gt;The meetings will be scheduled in advance. Ideally, each meeting
should also have a blog post before-hand giving background material,
although that may be difficult to achieve in practice. Similarly,
after each meeting, we'll typically post minutes and a recording, and
ideally try to write up a summary blog post with major
points. (Sometimes recordings are hard to achieve, either for
technical reasons or because we wanted the ability to discuss more
sensitive topics.)&lt;/p&gt;
&lt;p&gt;The meetings are open for anyone to listen in and attend. They
generally take place on Mondays at &amp;quot;noon Boston time&amp;quot; -- but for the
precise scheduling you should check the &lt;a href=&quot;https://github.com/rust-lang/lang-team/#meeting-calendar&quot;&gt;lang team calendar&lt;/a&gt;. We'll
try to keep the calendar up to date with the topic to be discussed in
each meeting, as well.  Meetings might not happen every week, if we
don't have a topic in mind.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#first-design-meeting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;first-design-meeting&quot;&gt;&lt;/a&gt;First design meeting&lt;/h2&gt;
&lt;p&gt;Our first design meeting was actually last Monday! We discussed the
soundness hole that was found some time ago in &lt;code&gt;Pin&lt;/code&gt;.  You can read
the &lt;a href=&quot;https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2020-01-06-Pin-unsoundness.md&quot;&gt;minutes&lt;/a&gt; from our discussion and a &lt;a href=&quot;https://youtu.be/MX_GRNLhlY8&quot;&gt;recording&lt;/a&gt; is also
available. You might also find it easier to read the &lt;a href=&quot;https://internals.rust-lang.org/t/unsoundness-in-pin/11311/112?u=nikomatsakis&quot;&gt;comments in the
internals thread&lt;/a&gt;. The good news is that we seem to be
centralizing on a &lt;a href=&quot;https://internals.rust-lang.org/t/explicit-negative-impls-to-fix-pin-soundness-hole/11587&quot;&gt;solution based on negative impls&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#next-design-meeting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;next-design-meeting&quot;&gt;&lt;/a&gt;Next design meeting&lt;/h2&gt;
&lt;p&gt;The next design meeting will take place this coming Monday. The topic
will be how to fix &lt;a href=&quot;https://github.com/rust-lang/rust/issues/57893&quot;&gt;rust-lang/rust#57893&lt;/a&gt;, which is a soundness bug
related to &lt;code&gt;dyn&lt;/code&gt; types. There is a &lt;a href=&quot;https://gist.github.com/0cf84ac05ce7751b5759cbf335c4d327&quot;&gt;prepared writeup describing the
problem and a possible solution&lt;/a&gt; to guide the meeting. It is
maybe worth noting that one of the proposed solutions involved a Rust
2021 edition as well (although there are smaller, more targeted fixes
that do not require a new edition).&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#design-meetings-after-that&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;design-meetings-after-that&quot;&gt;&lt;/a&gt;Design meetings after that&lt;/h2&gt;
&lt;p&gt;The next two weeks are likely to not have design meetings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;January 20th is Martin Luther King, Jr. day in the US.&lt;/li&gt;
&lt;li&gt;January 27th is the Mozilla All Hands.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a result, in both cases, many of the lang team members will be
unable to attend.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
</feed>
